@using Appva.Mcss.Admin.Application.Common
@model Appva.Mcss.Admin.Models.ViewTestCalendarModel
@{ ViewBag.Title = "Kalender"; }
@Html.Partial("~/Areas/Patient/Features/Patient/Partials/_PatientDetails.cshtml", Model.Patient)
@Html.Partial("~/Features/Shared/_SubMenuPartial.cshtml", Model.Patient)
@section JavaScript {
    <script type="text/javascript" src="/Assets/js/mcss.calendar.lb.js"></script>
}
<div id="subheader" class="cf">
    <h1>Kalender Sekvens (TEST)</h1>
    @Html.ActionLink(Permissions.Calendar.Create, "Ny aktivitet", "Create", "TestCalendar", new { Id = Model.Patient.Id, Date = Model.Current }, new { @class = "btn lb-link" })
</div>
<div id="content" class="cf">
    <div id="content-primary">
        <div class="cal-wrap cf">

            @using (Html.BeginForm("view", "testcalendar", FormMethod.Get, new { }))
            {
                <div class="h cal-h cf">
                    <h2>@String.Format("{0:MMMM yyyy}", Model.Current).FirstToUpper()</h2>
                    <input type="hidden" name="date" value="@Model.Current" />
                    <input type="submit" name="prev" value="@String.Format("{1} {0}", Model.Previous.ToString("MMMM").FirstToUpper(), WebUtility.HtmlDecode("&larr;"))" class="prev" />
                    <input type="submit" name="next" value="@String.Format("{0:MMMM} {1}", Model.Next, WebUtility.HtmlDecode("&rarr;")).FirstToUpper()" class="next" />
                </div>
            }

            <div id="calendar">
                <table>
                    <thead>
                        <tr>
                            <td class="week-number"></td>
                            @{
                                var firstDayOfWeek = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek;
                                var daysOfWeek = new List<string>() {
                                    DayOfWeek.Monday.Equals(firstDayOfWeek) ? "Måndag" : "Söndag",
                                    DayOfWeek.Monday.Equals(firstDayOfWeek) ? "Tisdag" : "Måndag",
                                    DayOfWeek.Monday.Equals(firstDayOfWeek) ? "Onsdag" : "Tisdag",
                                    DayOfWeek.Monday.Equals(firstDayOfWeek) ? "Torsdag" : "Onsdag",
                                    DayOfWeek.Monday.Equals(firstDayOfWeek) ? "Fredag" : "Torsdag",
                                    DayOfWeek.Monday.Equals(firstDayOfWeek) ? "Lördag" : "Fredag",
                                    DayOfWeek.Monday.Equals(firstDayOfWeek) ? "Söndag" : "Lördag"
                                };
                            }
                            @foreach (var day in daysOfWeek)
                            {
                                <th scope="col">@day</th>
                            }
                        </tr>
                    </thead>
                </table>
                @foreach (var week in Model.Calendar)
                {

                    var tableHeight = (week.Days.Max(x => x.NumberOfEvents) * 40) + 25;
                    <div class="month-row" style="height:@(tableHeight > 100 ? tableHeight : 100)px">

                        <table class="bg-table">
                            <tr>
                                <td class="week-number">v @week.WeekNumber</td>
                                @foreach (var day in week.Days)
                                {
                                    <td class="date @(!day.IsWithinMonth ? "inactive" : "active") @(day.IsToday ? "today" : "")">@day.Date.Day</td>
                                }
                            </tr>
                        </table>

                        <table class="evt-grid">
                            @{
                                var events = week.AllEvents;
                                var date = week.Days.First().Date;
                            }
                            @while (events.IsNotEmpty())
                            {
                                <tr>
                                    <td class="week-number">&nbsp;</td>
                                    @for (var i = 0; i < 7; )
                                    {
                                        var e = events.Where(x => x.StartTime.Date.Equals(date.AddDays(i))).FirstOrDefault();
                                        if (week.Days.First().Date == date.AddDays(i))
                                        {
                                            e = events.Where(x => x.StartTime.Date <= date.AddDays(i)).FirstOrDefault();
                                        }
                                        if (e != null)
                                        {
                                            var colspan = (e.EndTime.Date - date.AddDays(i)).Days + 1;
                                            var classes = string.Format(
                                                "act {0} {1} {2} {3}",
                                                e.CategoryId,
                                                date.AddDays(i).Date > e.StartTime.Date ? "c-from-last-week" : "",
                                                colspan > 7 - i ? "c-next-week" : "",
                                                e.Id);

                                            <td colspan="@(colspan > 7-i ? 7-i :colspan)">
                                                <a class="lb-link" href="@Url.Action("Details", "Calendar", new { TaskId = e.TaskId, SequenceId = e.SequenceId, StartTime = e.StartTime, EndTime = e.EndTime})">
                                                    <span style="background-color:@e.Color;" class="@classes" id="@e.Id">
                                                        <span class="time">
                                                            @if (e.IsFullDayEvent)
                                                            {
                                                                @:Hela dagen
                                                            }
                                                            else
                                                            {
                                                                <span class="start">
                                                                    @String.Format("{0:HH:mm}", e.StartTime)
                                                                </span>
                                                                <span class="end">
                                                                    @String.Format("{0:HH:mm}", e.EndTime)
                                                                </span>
                                                            }
                                                        </span>
                                                        @e.CategoryName
                                                        <span class="act-info">
                                                            <strong>Från:</strong>
                                                            <span>
                                                                @e.StartTime
                                                            </span>
                                                            <strong>Till:</strong>
                                                            <span>
                                                                @e.EndTime
                                                            </span>
                                                            <strong>Anteckningar/instruktion:</strong>
                                                            <span>
                                                                @e.Description
                                                            </span>
                                                            @if (e.NeedsQuittance)
                                                            {
                                                                <strong>Kvitterad av:</strong>
                                                                <span>
                                                                    @(e.IsQuittanced ? string.Format("{0}", e.QuittancedBy.FullName) : string.Format("Ej kvitterad"))
                                                                </span>
                                                            }
                                                        </span>
                                                    </span>
                                                </a>
                                            </td>
                                                            events.Remove(e);
                                                            i = i + colspan;
                                        }
                                        else
                                        {
                                            <td></td>
                                            i++;
                                        }
                                    }
                                </tr>
                            }
                        </table>
                    </div>
                   
                }
            </div>

        </div>

    </div>
</div>