@using Appva.Mcss.Admin.Application.Common
@model ListAccountModel
@{
    SetTitle("Medarbetare"); 
}
<div id="subheader" class="cf">
	<h1>Medarbetare</h1>
	@Html.ActionLink(Permissions.Practitioner.Create, "Ny medarbetare", "Create", "Accounts", null, new { @class = "btn lb-link" })
	@Html.Partial("_AccountSearch")
</div>
<div class="col-wrap cols-2-1 cf">
	<div class="col col-1">
		<div class="filter-ctrl">
			@using (Html.BeginForm("List", "Accounts", FormMethod.Get, new { @class = "filter-form" }))
            {
                <input type="hidden" name="isActive" value="@Model.IsFilterByIsActiveEnabled.ToString()" />
                <input type="hidden" name="isPaused" value="@Model.IsFilterByIsPausedEnabled.ToString()" />
                <input type="hidden" name="filterByCreatedBy" value="@Model.IsFilterByCreatedByEnabled.ToString()" />
                <div class="filter-row">
                    <strong>Visa:</strong>
                    <ul>
                        <li>@Html.ActionLink("Alla", "List", new { RoleFilterId = Model.RoleFilterId, DelegationFilterId = Model.DelegationFilterId }, new { @class = (!Model.IsFilterByCreatedByEnabled.GetValueOrDefault(false) && Model.IsFilterByIsActiveEnabled.GetValueOrDefault(true) && !Model.IsFilterByIsPausedEnabled.GetValueOrDefault(false) && !Model.IsFilterByIsSynchronizedEnabled.HasValue) ? "div sel" : "div" })</li>
                        <li>@Html.ActionLink("Mina delegeringar", "List", new { FilterByCreatedBy = true, RoleFilterId = Model.RoleFilterId, DelegationFilterId = Model.DelegationFilterId }, new { @class = (Model.IsFilterByCreatedByEnabled.GetValueOrDefault(false)) ? "div sel" : "div" })</li>
                        <li>@Html.ActionLink("Borttagna", "List", new { isActive = false, RoleFilterId = Model.RoleFilterId, DelegationFilterId = Model.DelegationFilterId }, new { @class = !Model.IsFilterByIsActiveEnabled.GetValueOrDefault(true) ? "div sel" : "div" })</li>
                        <li>@Html.ActionLink("Inaktiverade", "List", new { isPaused = true, RoleFilterId = Model.RoleFilterId, DelegationFilterId = Model.DelegationFilterId }, new { @class = (Model.IsFilterByIsPausedEnabled.GetValueOrDefault(false)) ? "div sel" : "div" })</li>
                        @if (Html.HasPermissionFor(Permissions.Synchronization.Read))
                        {
                            <li>@Html.ActionLink("Synkroniserade", "List", new { isSynchronized = true, RoleFilterId = Model.RoleFilterId, DelegationFilterId = Model.DelegationFilterId }, new { @class = Model.IsFilterByIsSynchronizedEnabled.GetValueOrDefault(false) ? "div sel" : "div" })</li>
                            <li>@Html.ActionLink("Ej synkroniserade", "List", new { isSynchronized = false, RoleFilterId = Model.RoleFilterId, DelegationFilterId = Model.DelegationFilterId }, new { @class = (!Model.IsFilterByIsSynchronizedEnabled.GetValueOrDefault(true)) ? "div sel" : "div" })</li>
                        }
                    </ul>
                </div>
                        if (Model.Delegations.Count > 0)
                        {
					<div class="filter-row">
						<strong>Med delegering</strong>
						@Html.DropDownListFor(x => x.DelegationFilterId, new SelectList(Model.Delegations, "Value", "Text"), "Alla")
					</div>
                        }
				<div class="filter-row">
					<strong>Med titel:</strong>
					@Html.DropDownListFor(x => x.RoleFilterId, new SelectList(Model.Roles, "Value", "Text"), "Alla")
				</div>
				<div class="filter-row">
					@Html.Submit("Visa")
				</div>
            }
		</div>
	</div>
	@if (Model.Accounts.Entities.Count > 0)
    {
        <div class="col col-2">
            <ul class="people delegate">
                @foreach (var item in Model.Accounts.Entities)
                {
                    <li class="cf @((item.HasExpiringDelegation) ? "update" : "")">
                        @if (item.IsEditableForUser(Model.CurrentUser))
                        {
                            if (item.IsActive)
                            {
                                @Html.ActionLink(Permissions.Practitioner.Inactivate, "Ta bort", "Inactivate", "Accounts", new { Id = item.Id }, new { @class = "btn btn-del" })
                            }
                            if (!item.IsActive && !item.IsPaused)
                            {
                                @Html.ActionLink(Permissions.Practitioner.Reactivate, "Aktivera", "Reactivate", "Accounts", new { Id = item.Id }, new { @class = "btn" })
                            }
                            if (!item.IsPaused && item.IsActive)
                            {
                                @Html.ActionLink(Permissions.Practitioner.Pause, "Inaktivera", "Pause", "Accounts", new { Id = item.Id }, new { @class = "btn" })
                            }
                            if (item.IsPaused)
                            {
                                @Html.ActionLink(Permissions.Practitioner.Resume, "Aktivera", "UnPause", "Accounts", new { Id = item.Id }, new { @class = "btn" })
                            }
                        }
                        <div class="h">
                            <h2>
                                @if (item.IsActive)
                                {
                                    @Html.ActionLink(item.FullName, "List", "Delegation", new { id = item.Id }, null)
                                }
                                else
                                {
                                    @item.FullName
                                }
                            </h2>
                            <span class="pnr">
                                @item.PersonalIdentityNumber
                            </span>
                        </div>
                        <div class="i">
                            <strong>Titel:</strong>
                            <span>@item.Title</span>
                        </div>
                        @if (Html.HasPermissionFor(Permissions.Synchronization.Read))
                        {
                            <div class="i">
                                <strong>Synkroniserad:</strong>
                                <span>@(item.IsSynchronized && item.LastSynchronized.HasValue ? item.LastSynchronized.GetValueOrDefault().ToString() : "Nej") </span>
                            </div>
                        }
                    </li>
                }
            </ul>
            @Html.Pager((int) Model.Accounts.PageSize, (int) Model.Accounts.CurrentPage, (int) Model.Accounts.TotalCount).Options(o => o
            .DisplayTemplate("Pagination")
            .MaxNrOfPages(15)
            .AlwaysAddFirstPageNumber()
            .AddRouteValue("IsActive", Model.IsFilterByIsActiveEnabled)
            .AddRouteValue("IsPaused", Model.IsFilterByIsPausedEnabled)
            .AddRouteValue("IsSynchronized", Model.IsFilterByIsSynchronizedEnabled)
            .AddRouteValue("FilterByCreatedBy", Model.IsFilterByCreatedByEnabled)
            .AddRouteValue("DelegationFilterId", Model.DelegationFilterId)
            .AddRouteValue("RoleFilterId", Model.RoleFilterId))
        </div>
    }
</div>