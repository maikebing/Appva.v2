@using Appva.Mcss.Admin.Areas.Backoffice.Models
@model Appva.Mcss.Admin.Areas.Backoffice.Models.ListGeneralSettingsModel
@{
    var item = ViewData["item"] as ListGeneralSettings;
}
<li id="@("item" + item.Index)">
    <div id="setlist-overlay">
        <div class="success-message"></div>
    </div>
    <div class="header">
        @if (item.Category != item.SubCategory)
            {
            <h3 title="@item.MachineName"><span style="background:@item.CategoryColor"></span>@item.SubCategory</h3>
        }
        <h2>@item.Name</h2>
        @if (string.IsNullOrEmpty(item.Description) == false)
            {
            <p>@item.Description</p>
        }
    </div>
    <div class="content">
        <form id="@("form" + item.Index)" method="post">
            @if (item.Type == typeof(int))
            {
                int value;
                @Textbox("Värde", item.Index, "value" + item.Index, (int.TryParse(item.Value, out value) ? value : 0), false, true)
            }
            else if (item.Type == typeof(Boolean))
            {
                @Checkbox("check" + item.Index, item.Index, Convert.ToBoolean(item.Value))
            }
            else if (item.PdfLookAndFeel != null && item.IsJson)
            {
                @Checkbox("pdf-custFooter", item.Index, item.PdfLookAndFeel.IsCustomFooterTextEnabled, "Custom footer text", false, true)
                @Checkbox("pdf-custLogotype", item.Index, item.PdfLookAndFeel.IsCustomLogotypeEnabled, "Custom logotype", false)
                @Textbox("Footer text", item.Index, "pdf-footertext", item.PdfLookAndFeel.FooterText)
                @Textbox("Logotype path", item.Index, "pdf-logopath", item.PdfLookAndFeel.LogotypePath, false)
                @ColorInput("Background color", item.Index, "pdf-bgcolor", item.PdfLookAndFeel.BackgroundColor)
                @ColorInput("Font color", item.Index, "pdf-fontcolor", item.PdfLookAndFeel.FontColor)
                @ColorInput("Table border color", item.Index, "pdf-bordercolor", item.PdfLookAndFeel.TableBorderColor)
                @ColorInput("Table header color", item.Index, "pdf-headercolor", item.PdfLookAndFeel.TableHeaderColor, false)
                @Html.HiddenFor(i => item.PdfLookAndFeel)
            }
            else if (item.SecurityTokenConfig != null && item.IsJson)
            {
                <button type="submit" id="signingKeyButton" name="signingKeyButton" value="signingKeyButton" class="item-button" onmouseup="update(@("form" + item.Index), this.id, @(item.Index), '@(item.CategoryColor)', false, 'Genererade en ny nyckel')" onkeyup="update(@("form" + item.Index), this.id, @(item.Index), '@(item.CategoryColor)', false, 'Genererade en ny nyckel')">Generate new key</button>
                <div style="clear:both"></div>
                    @Textbox("Signing key", item.Index, "sec-newSigningKey", item.SecurityTokenConfig.SigningKey, true, false, false, false)
                    @Textbox("Reset token lifetime", item.Index, "sec-tokenResetLifetime", item.SecurityTokenConfig.ResetTokenLifetime, false, false, true)
                    @Textbox("Registration token lifetime", item.Index, "sec-tokenRegLifetime",
                    new TimeSpan(item.SecurityTokenConfig.RegistrationTokenLifetime.Hours,
                                   item.SecurityTokenConfig.RegistrationTokenLifetime.Minutes,
                                     item.SecurityTokenConfig.RegistrationTokenLifetime.Seconds), true, false, true)
                    @Textbox("Days", item.Index, "regDays", item.SecurityTokenConfig.RegistrationTokenLifetime.Days, false, true)
                    @Html.HiddenFor(i => item.SecurityTokenConfig.Audience)
                    @Html.HiddenFor(i => item.SecurityTokenConfig.Issuer)
                    @Html.HiddenFor(i => item.SecurityTokenConfig)
                    @Html.Hidden("sec-newSigningKeyHidden", item.SecurityTokenConfig.SigningKey)
            }
            else if (item.SecurityMailerConfig != null && item.IsJson)
            {
                @Checkbox("secmailconf-signing", item.Index, item.SecurityMailerConfig.IsMailSigningEnabled, "Mail Signing", false, true, "If mail signing is enabled, then the e-mail will be signed by the certificate specified by the <c>CertificateThumbPrint</c>.")
                @Checkbox("secmailconf-deviceRegMail", item.Index, item.SecurityMailerConfig.IsMobileDeviceRegistrationMailEnabled, "Mobile Device Registration Mail", false, true, "If mobile device registration mail is enabled, then an e-mail will be sent when a new user account has been registered.")
                @Checkbox("secmailconf-regMail", item.Index, item.SecurityMailerConfig.IsRegistrationMailEnabled, "Registration Mail", false, true, "If registration mail is enabled, then an e-mail will be sent when a new user account has been registered.")
                @Checkbox("secmailconf-resetPassMail", item.Index, item.SecurityMailerConfig.IsResetPasswordMailEnabled, "Reset Password Mail", false, true, "If reset password is enabled, then an e-mail will be sent when a current user account has requested for a password reset.")
                @Checkbox("secmailconf-eventMail", item.Index, item.SecurityMailerConfig.IsSecurityEventMailEnabled, "Security Event Mail", false, false, "If security event mail is enabled, then any alterations on the account will be reported by an e-mail.")
                @Html.HiddenFor(i => item.SecurityMailerConfig)
            }
            else
            {
                int value;
                if (item.MachineName == Model.SelectOptions[0] && int.TryParse(item.Value, out value))
                {
                    @Textbox("Värde", item.Index, "value" + item.Index, value, false, true)
                }
                else if (item.MachineName == Model.SelectOptions[0])
                {
                    @Select("Välj", item.Index, "select" + item.Index, item.Value, new Dictionary<string, string> { { "High", "" }, { "Medium", "" }, { "Low", "" } })
                }
                else if (item.MachineName == Model.SelectOptions[1])
                {
                    @Select("Välj", item.Index, "select" + item.Index, item.Value, new Dictionary<string, string> { { "Form", "" }, { "Siths", "" } })
                }
                else if (item.MachineName == Model.SelectOptions[2])
                {
                    @Select("Välj", item.Index, "select" + item.Index, item.Value, new Dictionary<string, string> { { "", "Ingen" }, { "ordination", "Ordination" }, { "calendar", "Calendar" }, { "ordination;calendar", "Ordination and Calendar" } })
                }
                else
                {
                    @Textbox("Sträng", item.Index, "strValue" + item.Index, item.Value, false)
                }
            }
            <div class="bottom">
                <button type="submit" id="@("button" + item.Index)" value="update" onmouseup="update(@("form" + item.Index), this.id, @(item.Index), '@(item.CategoryColor)', true, 'Inställningen uppdaterades')" onkeyup="update(@("form" + item.Index), this.id, @(item.Index), '@(item.CategoryColor)', true, 'Inställningen uppdaterades')" disabled>Uppdatera</button>
                @Html.HiddenFor(i => item.Id)
                <input type="hidden" id="@("submitValue" + item.Index)" name="submitValue" />
            </div>
        </form>
    </div>
</li>

@* Templates *@
@helper Checkbox(string id, int index, bool isChecked, string description = null, bool isCentered = true, bool formGroup = false, string title = null)
{
    <div class="settings-section" style="@(formGroup ? "border-width:1px 1px 0 1px" : "border-width:1px;margin-bottom:15px")">
        @if (description != null)
        {
            <label class="section-label" for="@id" title="@description">@description</label>
        }
        @if (title != null && description != null)
        {
            <label class="section-label" for="@id" title="@(description + ". " + title)">@description</label>
        }
        <div class="form-group @(isCentered ? "t-center" : "t-right")">
            <label class="checkbox-inline" for="@id">
                <input type="checkbox" id="@id" name="@id" onchange="setButtonState(@("button" + index));setCheckboxState(this.id , '@(id + "hidden" + index)')" @(isChecked ? "checked" : "") />Aktivera
            </label>
            <input type="hidden" id="@(id + "hidden" + index)" name="@id" value="@isChecked.ToString()" />
        </div>
    </div>
}
@helper Select(string labelName, int index, string id, string value, Dictionary<string, string> options)
{
string labelId = id + "label";
    <div class="select-section" style="border-width:1px;margin-bottom:15px">
        <label class="section-label attr-item" id="@labelId" for="@id">@labelName</label>
        <div class="select-wrapper">
            <select id="@id" name="@id" onchange="setButtonState(@("button" + index))">
                @foreach (var option in options)
                {
                    <option value="@option.Key" @(option.Key.ToLower() == value.ToLower() ? " selected" : "")>@(option.Value == string.Empty ? option.Key : option.Value)</option>
                }
            </select>
        </div>
    </div>
}
@helper Textbox(string labelName, int index, string id, dynamic value, bool formGroup = true, bool isNumber = false, bool isTime = false, bool isEnabled = true)
{
string labelId = id + "label";
    <div class="value-section">
        <label class="value-label attr-item border-r" id="@labelId" for="@id" title="@labelName">@labelName</label>
        <input type="@(isTime ? "time" : (isNumber ? "number" : "text"))" @(isTime ? Html.Raw(" step='1' required='required'") : Html.Raw("")) @(isEnabled == false ? " disabled" : "") id="@id" name="@id" value="@value" autocomplete="off" onchange="setButtonState(@("button" + index))" onkeypress="setButtonState(@("button" + index))" @(isNumber ? Html.Raw(" min='0' ") : Html.Raw("")) style="@(formGroup ? "border-width:1px 1px 0 1px" : "border-width:1px;margin-bottom:15px")" />
    </div>
}
@helper ColorInput(string labelName, int index, string id, dynamic color, bool formGroup = true)
{
string pickerId = id + "picker", labelId = id + "label", hex = @RgbToHex(color);
    <div class="value-section" style="@(formGroup ? "padding-bottom:0" : "padding-bottom:15px")">
        <label id="@(labelId)" class="value-label attr-item" for="@id" title="@labelName">@labelName</label>
        <input class="p-left" id="@id" name="@id" maxlength="7" style="@(formGroup ? "border-width:1px 1px 0 1px" : "border-width:1px")" onchange="colorPicker('@pickerId', this.id)" onkeypress="setButtonState(@("button" + index))" type="text" value="@hex" />
        <input id="@pickerId" style="@(formGroup ? "bottom:7px" : "bottom:23px")" onchange="colorPicker('@id', this.id);setButtonState(@("button" + index));" type="color" value="@hex" />
    </div>
}
@functions
{
    public string RgbToHex(dynamic color)
    {
        return "#" + (color.R.ToString("X2") + color.G.ToString("X2") + color.B.ToString("X2")).ToLower();
    }
}