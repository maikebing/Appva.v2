@using System.Data;
@model PractitionerSelectionModel
@{
    SetTitle("Importera medarbetare");
}
<div id="subheader" class="cf">
    <h1>Importera medarbetare</h1>
</div>
<div id="content" class="log cf">
    <div id="fileimport">
        @if (Model.Data.IsNotNull())
        {
            using (Html.BeginForm())
            {
                <h3 style="padding-bottom:10px">Välj vilka rader som ska importeras</h3>
                <div id="progress-container">
                    <div style="width:0%" class="progress-bar"></div>
                    <div class="progress-section">
                        <div class="progress-section-notstarted progress-section-animation">1</div>
                    </div>
                    <div class="progress-section">
                        <div class="progress-section-notstarted">2</div>
                    </div>
                    <div class="progress-section">
                        <div class="progress-section-notstarted">3</div>
                    </div>
                    <div class="progress-section">
                        <div class="progress-section-notstarted">4</div>
                    </div>
                </div>
                <div id="fileinfo">
                    <table class="device-table fileinfo">
                        <tr>
                            <td>Läs in från rad</td>
                            <td>@Html.TextBoxFor(x => x.SelectedFirstRow, new { Value = Model.SelectedFirstRow, placeholder = Model.SelectedFirstRow, @class = "read-from-row" })</td>
                        </tr>
                        <tr>
                            <td>Läs in till rad</td>
                            <td>@Html.TextBoxFor(x => x.SelectedLastRow, new { Value = Model.SelectedLastRow, placeholder = Model.SelectedLastRow, @class = "read-to-row" })</td>
                        </tr>
                    </table>
                </div>
                <h3>Förhandsgranskning</h3>
                <table id="row-selection" class="device-table">
                    <thead>
                        <tr class="head">
                            <th style="background:#777;text-align:center">@(Model.ValidateAtRow + 1)</th>
                            @if (Model.Data.Rows.Count > 0)
                            {
                                for (int i = 0; i < Model.Data.Columns.Count; i++)
                                {
                                    <th>@Model.Data.Rows[0][Model.Data.Columns[i]]</th>
                                }
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Data.Rows.Count > 1)
                        {
                            int j = 0;
                            for (int i = 0; i < Model.Data.Rows.Count; i++)
                            {
                                if (j > 0)
                                {
                                    var row = j > Model.PreviewRows ? Model.LastRow - Model.SkipRows - Model.PreviewRows + j : Model.ReadFromRow + j;
                                    var isEmptyRow = j > Model.PreviewRows && j <= Model.Data.Rows.Count - Model.PreviewRows;
                                    <tr data-row="@(isEmptyRow ? -1 : row)">
                                        @if (isEmptyRow)
                                        {
                                            <td class="emptyrow" style="font-size:21px;padding:0 15px!important;text-align:left!important" @("colspan=" + (Model.Data.Columns.Count + 1))>&#9642; &#9642; &#9642;</td>
                                            i--;
                                        }
                                        else
                                        {
                                            <td>@row</td>
                                            foreach (DataColumn column in Model.Data.Columns)
                                            {
                                                <td>@Model.Data.Rows[i][column].ToString()</td>
                                            }
                                        }
                                    </tr>
                                }
                                j++;
                            }
                        }
                        else
                        {
                            <tr>
                                <td class="emptyrow" @("colspan=" + (Model.Data.Columns.Count + 1))>Filen innehåller inga rader.</td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div style="margin-top:20px;float:right">
                    @Html.HiddenFor(x => x.Id)
                    @Html.AntiForgeryToken()
                    @Html.ActionLink("Föregående", "PractitionerPreview", "Import", new { Id = Model.Id, style = "padding-right:8px" })
                    @Html.Submit("Spara och fortsätt", new { @class = "btn-green" })
                </div>
            }
        }
        else
        {
            <h3>Det gick inte att öppna filen.</h3>
        }
    </div>
</div>
<script>
    $(document).ready(function () {
        $('.progress-bar').animate({ width: '19%' }, 600);
        setTimeout(function () {
            $('.progress-section-animation').css({ backgroundColor: '#5ac24f', color: '#fff' });
        }, 400);

        var start = $('.read-from-row');
        var end = $('.read-to-row');
        var lastValue;
        setSelectedRow(start, true);
        setSelectedRow(end, false);
        start.bind('input', function () {
            setSelectedRow($(this), true);
        });
        start.change(function () {
            setInputValue($(this), end, true);
        });
        end.bind('input', function () {
            setSelectedRow($(this), false);
        });
        end.change(function () {
            setInputValue($(this), start, false);
        });

        function setSelectedRow(input, isStartValue) {
            var next = isStartValue ? end : start;
            var value = parseInt(input.val()), nextValue = parseInt(next.val());
            var bgColorStart = '#d7f5d5', bgColorStartRow = '#f6fff6', textColorStart = '#008908';
            var bgColorEnd = '#f7d9d9', bgColorEndRow = '#fff6f6', textColorEnd = '#871717';
            $('#row-selection.device-table tbody tr').each(function () {
                var cell = $(this).children(':first');
                var dataRow = $(this).attr('data-row');
                if (value == nextValue && dataRow != -1) {
                    lastValue = value;
                    setColor($(this), bgColorStartRow, '#444');
                    setColor(cell, bgColorStart, textColorStart);
                }
                if (dataRow == input.val()) {
                    if (isStartValue && value <= nextValue) {
                        setColor($(this), bgColorStartRow, '#444');
                        setColor(cell, bgColorStart, textColorStart);
                        if (typeof lastValue != 'undefined') {
                            var row = $('#row-selection.device-table tbody').children('[data-row="' + lastValue + '"]');
                            if (row.children(':first').css('background-color') == 'rgb(215, 245, 213)' && value != nextValue) {
                                var isNext = lastValue == nextValue;
                                setColor(row, isNext ? bgColorEndRow : '#fff', '#444');
                                setColor(row.children(':first'), isNext ? bgColorEnd : '#eee', isNext ? textColorEnd : '#444');
                                lastValue = (function () {
                                    return;
                                })();
                            }
                        }
                    } else if (!isStartValue && value > nextValue) {
                        setColor($(this), bgColorEndRow, '#444');
                        setColor(cell, bgColorEnd, textColorEnd);
                    }
                } else if (dataRow != -1 && dataRow != next.val()) {
                    setColor($(this), '#fff', '#444');
                    setColor(cell, '#eee', '#444');
                }
            });
        }
        function setColor(cell, bgColor, textColor) {
            cell.css({ 'background-color': bgColor, 'color': textColor });
        }
        function setInputValue(sel, next, isStartVal) {
            var min = @(Model.ReadFromRow + 1), max = @(Model.LastRow + Model.SkipRows + Model.ValidateAtRow);
            if (sel.val() > max) {
                sel.val(max);
            }
            if (sel.val() < min) {
                sel.val(min);
            }
            var selVal = parseInt(sel.val()), nextVal = parseInt(next.val());
            if ((isStartVal && selVal > nextVal) || (!isStartVal && selVal < nextVal)) {
                next.val(selVal);
            }
            setSelectedRow(sel, isStartVal);
        }
    });
</script>