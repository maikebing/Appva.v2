@model Appva.Mcss.Admin.Areas.Backoffice.Models.ListGeneralSettingsModel
@{
    SetTitle("Admin - Generella inställningar");
}
@Html.Partial("_BackofficeMenuPartial")

<div id="subheader" class="cf">
    <h1>Generella inställningar</h1>
</div>
<div id="content" class="cf">
    <script>
        function colorPicker(id1, id2) {
            document.getElementById(id1).value = document.getElementById(id2).value;
        }
        function setBackground(id1, id2, bgColor, color, inputBgColor) {
            var el = document.getElementById(id1);
            el.style.backgroundColor = bgColor;
            el.style.color = color;
            document.getElementById(id2).style.backgroundColor = inputBgColor;
        }
        function rgbToHex(id1, id2, r, g, b) {
            var bin = r << 16 | g << 8 | b;
            var hex = "#" + (function (h) { return new Array(7 - h.length).join("0") + h })(bin.toString(16))
            document.getElementById(id1).value = hex;
            document.getElementById(id2).value = hex;
        }
    </script>
    <script src="@Url.Content("~/Scripts/jquery.validate.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/index.js")" type="text/javascript"></script>

    <script>
        $(function () {
            $('#boolSetting').submit(function () {
                if ($(this).valid()) {
                    $.ajax({
                        url: "list/save",
                        type: "POST",
                        data: $(this).serialize(),
                        success: function (result) {
                            $('#result').html(result);
                        }
                    });
                }
                return false;
            });
        });
    </script>

    
    
       
    <div id="content-primary">
    @if (Model.List != null && Model.List.Count() > 0)
    {
        <ul id="setlist">
            @foreach (var item in Model.List)
            {
                <li>
                    <div class="header">
                        <h3 title="@item.MachineName"><span style="background:@item.CategoryColorCode"></span>@item.Category</h3>
                        <h2>@item.Name</h2>
                        @if (string.IsNullOrEmpty(item.Description) == false)
                        {
                            <p>@item.Description</p>
                        }
                    </div>
                    <div class="content">
                        @if (item.IntValue.HasValue) { @NumericTextbox("Värde", "value" + item.Index, item.IntValue.Value) }
                        @if (item.BoolValue.HasValue) { @Checkbox("check" + item.Index, (bool)item.BoolValue) }
                    </div>
                    @if (item.IsJson == true)
                    {
                        if (item.PdfLookAndFeel != null)
                        {
                            @Checkbox("pdf-cust-footer", item.PdfLookAndFeel.IsCustomFooterTextEnabled, "Custom footer text", false)
                            @Checkbox("pdf-cust-logotype", item.PdfLookAndFeel.IsCustomLogotypeEnabled, "Custom logotype", false)
                            @ColorInput("Background color", "pdf-bgcolor", item.PdfLookAndFeel.BackgroundColor)
                            @ColorInput("Font color", "pdf-fontcolor", item.PdfLookAndFeel.FontColor)
                            @ColorInput("Table border color", "pdf-bordercolor", item.PdfLookAndFeel.TableBorderColor)
                            @ColorInput("Table header color", "pdf-headercolor", item.PdfLookAndFeel.TableHeaderColor, false)
                        }

                        if (item.SecurityTokenConfig != null)
                        {
                            <div class="value-section">
                                @Html.LabelFor(i => item.SecurityTokenConfig.Audience):<h5>@item.SecurityTokenConfig.Audience</h5>
                                @Html.LabelFor(i => item.SecurityTokenConfig.Issuer):<h5>@item.SecurityTokenConfig.Issuer</h5>
                                @Html.LabelFor(i => item.SecurityTokenConfig.ResetTokenLifetime):<h5>@item.SecurityTokenConfig.ResetTokenLifetime</h5>
                                @Html.LabelFor(i => item.SecurityTokenConfig.RegistrationTokenLifetime):<h5>@item.SecurityTokenConfig.RegistrationTokenLifetime</h5>
                                @Html.LabelFor(i => item.SecurityTokenConfig.SigningKey):<h5>@item.SecurityTokenConfig.SigningKey</h5>
                            </div>
                        }

                        if (item.SecurityMailerConfig != null)
                        {
                            <div class="settings-section t-right">
                                @Html.LabelFor(i => item.SecurityMailerConfig.IsMailSigningEnabled, new { @class = "section-label attr-item", @title = "IsMailSigningEnabled" })
                                @Html.FormGroup(i => item.SecurityMailerConfig.IsMailSigningEnabled, "text").Checkbox("Aktivera").Validate().Build()
                            </div>
                            <div class="settings-section t-right">
                                @Html.LabelFor(i => item.SecurityMailerConfig.IsMobileDeviceRegistrationMailEnabled, new { @class = "section-label attr-item", @title = "IsMobileDeviceRegristrationMailEnabled" })
                                @Html.FormGroup(i => item.SecurityMailerConfig.IsMobileDeviceRegistrationMailEnabled, "text").Checkbox("Aktivera").Validate().Build()
                            </div>
                                <div class="settings-section t-right">
                                    @Html.LabelFor(i => item.SecurityMailerConfig.IsRegistrationMailEnabled, new { @class = "section-label attr-item", @title = "IsRegristrationMailEnabled" })
                                    @Html.FormGroup(i => item.SecurityMailerConfig.IsRegistrationMailEnabled, "text").Checkbox("Aktivera").Validate().Build()
                                </div>
                                    <div class="settings-section t-right">
                                        @Html.LabelFor(i => item.SecurityMailerConfig.IsResetPasswordMailEnabled, new { @class = "section-label attr-item", @title = "IsResetPasswordMailEnabled" })
                                        @Html.FormGroup(i => item.SecurityMailerConfig.IsResetPasswordMailEnabled, "text").Checkbox("Aktivera").Validate().Build()
                                    </div>
                                    <div class="settings-section t-right">
                                        @Html.LabelFor(i => item.SecurityMailerConfig.IsSecurityEventMailEnabled, new { @class = "section-label attr-item", @title = "IsSecurityEventMailEnabled" })
                                        @Html.FormGroup(i => item.SecurityMailerConfig.IsSecurityEventMailEnabled, "text").Checkbox("Aktivera").Validate().Build()
                            }

                            if (item.MachineName == item.MachineNames[6])
                            {
                                if (item.Name == "logout_timeout")
                                {
                                    using (Html.BeginForm(null, null, FormMethod.Post, new { id = "boolSetting" }))

                                    {
                                        <div id="result"></div>
                                    <div class="value-section">
                                        <input type="submit" value="OK" />
                                        @Html.FormGroup(i => item.StringValue, "text").Label("Värde", new { @class = "value-label" }).TextBox(null, new { @type = "number", @class = "value-input" }).Validate().Build()
                                    </div>
                        }

                        if (item.MachineName == item.MachineNames[6])
                        {
                            if (item.Name == "logout_timeout")
                            {
                                <div class="value-section">
                                    @Html.FormGroup(i => item.StringValue, "text").Label("Värde", new { @class = "value-label" }).TextBox(null, new { @type = "number", @class = "value-input" }).Validate().Build()
                                </div>
                            }

                            if (item.Name == "security_level")
                            {
                                <div class="value-section t-center">
                                    @Html.FormGroup(i => item.StringValue, "text").Label("Värde", new { @class = "value-label" }).Validate().Build()
                                    @Html.DropDownListFor(i => item.StringValue, new SelectList(new[] { item.StringValue == "High" || item.StringValue == "Medium" ? "Low" : "Medium", item.StringValue == "Low" || item.StringValue == "Medium" ? "High" : "Medium" }), item.StringValue)
                                </div>
                            }
                        }

                        if (item.MachineName == item.MachineNames[7])
                        {
                            <div class="value-section t-center">
                                @Html.FormGroup(i => item.StringValue, "text").Label("Värde", new { @class = "value-label" }).Validate().Build()
                                @Html.DropDownListFor(i => item.StringValue, new SelectList(new[] { item.StringValue == "form" ? "siths" : "form" }), item.StringValue)
                            </div>
                        }
                    }
                    @if (item.StringValue != null && item.IsJson == false)
                    {
                        <div class="value-section">
                            @Html.FormGroup(i => item.StringValue, "text").Label("Värde", new { @class = "value-label" }).TextBox(item.StringValue, new { @class = "value-input" }).Validate().Build()
                        </div>
                    }
                    </li>
                }
        </ul>
    }
    else
    {
        <div class="note">
            <h2>Inga inställningar hittades.</h2>
        </div>
    }
    </div>
</div>

@* Templates *@
@helper Checkbox(string id, bool isChecked, string description = null, bool isCentered = true)
{
    <div class="settings-section">
        @if (description != null)
        {
            <label class="section-label attr-item" for="@id" title="@description">@description.Trim()</label>
        }
        <div class="form-group @(isCentered ? "t-center" : "t-right")">
            <label class="checkbox-inline" for="@id">
                <input type="checkbox" id="@id" name="@id" @(isChecked ? "checked" : "") />Enable
            </label>
        </div>
    </div>
}
@helper NumericTextbox(string labelName, string id, int value)
{
    <div class="value-section">
        <label class="value-label" for="@id">@labelName</label>
        <input type="number" id="@id" name="@id" value="@value" autocomplete="off" />
    </div>
}
@helper ColorInput(string labelName, string id, dynamic color, bool formGroup = true)
{
    string pickerId = id + "picker", labelId = id + "label", hex = @RgbToHex(color);
    string onFocus = "setBackground('" + labelId + "', '" + id + "', '#4d90fe', '#fff', '#e9f1ff')";
    string onBlur = "setBackground('" + labelId + "', '" + id + "', 'transparent', '#222', 'transparent')";
    <div class="value-section" style="@(formGroup ? "padding-bottom:0" : "padding-bottom:15px")">
        <label id="@(labelId)" class="value-label attr-item" for="@id">@labelName</label>
        <input class="p-left" id="@id" name="@id" style="@(formGroup ? "border-width:1px 1px 0 1px" : "border-width:1px")" onfocus="@onFocus" onblur="@onBlur" onchange="colorPicker('@pickerId', this.id)" type="text" value="@hex" />
        <input id="@pickerId" style="@(formGroup ? "bottom:7px" : "bottom:23px")" onfocus="@onFocus" onblur="@onBlur" onchange="colorPicker('@id', this.id)" type="color" value="@hex" />
    </div>
}
@functions
{
    public string RgbToHex(dynamic color)
    {
        return "#" + (color.R.ToString("X2") + color.G.ToString("X2") + color.B.ToString("X2")).ToLower();
    }
}
