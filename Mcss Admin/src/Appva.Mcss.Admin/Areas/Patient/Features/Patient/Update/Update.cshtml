@using Appva.Mcss.Admin.Application.Common;
@model UpdatePatient
@{ 
    SetTitle("Ändra boendeuppgifter"); 
}
<div class="std-panel std-form lb-panel-small lb-validate-form" 
     data-valclass="PatientCreate" 
     data-valparams="id=@Model.Id;uidUrl=@Url.Action("VerifyUniquePatient");taxonUrl=@Url.Action("VerifyTaxon", "Taxa", new { Area = string.Empty })">    
    @using (Html.Post(null, new { Id = Model.Id }))
    {
        if (Model.Assessments.IsNotNull())
        { 
            <div class="row form-tabgroup lb-nav cf">
			    <ul class="nav cf">
                    <li class="sel">
                        <a class="rleft" href="#" data-formtab="form-tab-1">Personuppgifter</a>
                    </li>
                    <li>
                        <a class="rright" href="#" data-formtab="form-tab-2">Profiluppgifter</a>
                    </li>
                </ul>
		    </div>
        }
        <div class="form-tab form-tab-1 ">
            <h3 class="section-title">Ändra boendeuppgifter</h3>
            @Html.FormGroup(x => x.FirstName, "text large").Label().TextBox().Validate().Build()
            @Html.FormGroup(x => x.LastName, "text large").Label().TextBox().Validate().Build()
            @Html.FormGroup(x => x.PersonalIdentityNumber, "text").Label().TextBox().Validate().Build()
            @if (Model.HasAlternativeIdentifier)
            {
                @Html.FormGroup(x => x.Tag, "text small").Label().TextBox().Validate().Build()
            }
	        <div class="select selectgroup cf">
		        <strong>Adress:</strong>
                @if (Model.Taxons.IsNotNull())
                {
                    foreach (var taxon in Model.Taxons)
                    {
                    <div class="select">
                        <label class="structural">@taxon.Label</label>
                        @Html.DropDownList(taxon.Id,
                            new SelectList(taxon.Taxons, "Value", "Text", taxon.Selected),
                            string.Format("Välj {0}...", taxon.OptionLabel),
                            new { @class = "dropdown" }
                        )
                    </div>
                    }
                }
                @Html.HiddenFor(m => m.Taxon)
                @Html.ValidationMessageFor(m => m.Taxon)
	        </div>
            @Html.FormGroup(x => x.IsDeceased, "checkbox").Checkbox("Avliden").Validate().Build()
            @if (Html.HasPermissionFor(Permissions.SecurityConfidentiality.UpdatePeopleofPublicInterest))
            {
                @Html.FormGroup(x => x.IsPersonOfPublicInterestOrVip, "checkbox").Checkbox("Är allmänt känd?").Validate().Build()
            }
            @if (Html.HasPermissionFor(Permissions.SecurityConfidentiality.UpdateAllDemographicInformationSensitivity))
            {
                @Html.FormGroup(x => x.IsPersonWithHightenedSensitivity, "checkbox").Checkbox("Har skyddade uppgifter?").Validate().Build()
            }
        </div>
        if (Model.Assessments.IsNotNull())
        { 
            <div class="form-tab form-tab-2">
                <h3 class="section-title">Profiluppgifter</h3>
                @Html.FormGroup(x => x.Assessments).CheckboxList(new { @class = "health-attr" }).Validate().Build()
            </div>
        }
        <div class="submit">
		    @Html.Submit("Spara")
            @Html.Cancel("Avbryt")
	    </div>
    }
</div>