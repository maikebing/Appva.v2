@model Appva.Mcss.Admin.Areas.Backoffice.Models.ListGeneralSettingsModel
@{
    SetTitle("Admin - Generella inställningar");
}
@Html.Partial("_BackofficeMenuPartial")
<div id="subheader" class="cf">
    <h1>Generella inställningar</h1>
</div>
<div id="content" class="cf">
    <script>
        function colorPicker(id1, id2) {
            document.getElementById(id1).value = document.getElementById(id2).value;
        }
        function setCheckboxState(id1, id2) {
            var checkbox = document.getElementById(id2);
            if (document.getElementById(id1).checked) {
                checkbox.value = true;
            } else {
                checkbox.value = false;
            }
        }
        function setButtonState(id) {
            $(id).prop('disabled', false);
        }
        function update(formId, buttonId, index, color) {
            $(formId).submit(function (e) {
                var formData = $(this).serialize();
                e.preventDefault();
                $.ajax({
                    url: "list/update",
                    type: "POST",
                    data: formData,
                    success: function (result) {
                        $('#' + buttonId).prop('disabled', true);
                        $('#setlist-overlay .success-message').css('background-color', color);
                        $('#setlist-overlay .success-message').text('Inställningen uppdaterades');
                        $('#item' + index + ' #setlist-overlay').css('visibility', 'visible').hide();
                        $('#item' + index + ' #setlist-overlay').fadeIn('fast').delay(1500).fadeOut('fast');
                    }
                });
                $(this).off();
            });
        }
    </script>
    <div id="content-primary">
        @if (Model.List != null && Model.List.Count() > 0)
        {
            <ul id="setlist">
                @foreach (var item in Model.List)
                {
                    <li id="@("item" + item.Index)">
                        <div id="setlist-overlay">
                            <div class="success-message"></div>
                        </div>
                        <div class="header">
                            <h3 title="@item.MachineName"><span style="background:@item.CategoryColor"></span>@item.SubCategory</h3>
                            <h2>@item.Name</h2>
                            @if (string.IsNullOrEmpty(item.Description) == false)
                            {
                                <p>@item.Description</p>
                            }
                        </div>

                        <div class="content">
                            <form id="@("form" + item.Index)" method="post">
                                @if (item.Type == typeof(int))
                                {
                                    int value;
                                    @Html.HiddenFor(i => item.Id)
                                    @Textbox("Värde", item.Index, "value" + item.Index, (int.TryParse(item.Value, out value) ? value : 0), false, true)
                                }
                                else if (item.Type == typeof(Boolean))
                                {
                                    @Html.HiddenFor(i => item.Id)
                                    @Checkbox("check" + item.Index, item.Index, Convert.ToBoolean(item.Value))
                                }
                                else if (item.PdfLookAndFeel != null && item.IsJson)
                                {
                                    @Checkbox("pdf-custFooter", item.Index, item.PdfLookAndFeel.IsCustomFooterTextEnabled, "Custom footer text", false, true)
                                    @Checkbox("pdf-custLogotype", item.Index, item.PdfLookAndFeel.IsCustomLogotypeEnabled, "Custom logotype", false)
                                    @ColorInput("Background color", item.Index, "pdf-bgcolor", item.PdfLookAndFeel.BackgroundColor)
                                    @ColorInput("Font color", item.Index, "pdf-fontcolor", item.PdfLookAndFeel.FontColor)
                                    @ColorInput("Table border color", item.Index, "pdf-bordercolor", item.PdfLookAndFeel.TableBorderColor)
                                    @ColorInput("Table header color", item.Index, "pdf-headercolor", item.PdfLookAndFeel.TableHeaderColor, false)
                                    @Html.HiddenFor(i => item.PdfLookAndFeel)
                                    @Html.HiddenFor(i => item.Id)
                                    @Html.HiddenFor(i => item.PdfLookAndFeel.FooterText)
                                    @Html.HiddenFor(i => item.PdfLookAndFeel.LogotypePath)
                                }
                                else if (item.SecurityTokenConfig != null && item.IsJson)
                                {
                                    @Textbox("Audience", item.Index, "sec-tokenAudience", item.SecurityTokenConfig.Audience)
                                    @Textbox("Issuer", item.Index, "sec-tokenIssuer", item.SecurityTokenConfig.Issuer)
                                    @Textbox("Reset lifetime", item.Index, "sec-tokenResetLifetime", item.SecurityTokenConfig.ResetTokenLifetime)
                                    @Textbox("Registration lifetime", item.Index, "sec-tokenRegLifetime", item.SecurityTokenConfig.RegistrationTokenLifetime)
                                    @Textbox("Signing key", item.Index, "sec-tokenKey", item.SecurityTokenConfig.SigningKey, false)
                                    @Html.HiddenFor(i => item.SecurityTokenConfig)
                                    @Html.HiddenFor(i => item.Id)
                                }
                                else if (item.SecurityMailerConfig != null && item.IsJson)
                                {
                                    @Checkbox("secmailconf-signing", item.Index, item.SecurityMailerConfig.IsMailSigningEnabled, "IsMailSigningEnabled", false, true)
                                    @Checkbox("secmailconf-deviceRegMail", item.Index, item.SecurityMailerConfig.IsMobileDeviceRegistrationMailEnabled, "IsMobileDeviceRegistrationMailEnabled", false, true)
                                    @Checkbox("secmailconf-regMail", item.Index, item.SecurityMailerConfig.IsRegistrationMailEnabled, "IsRegistrationMailEnabled", false, true)
                                    @Checkbox("secmailconf-resetPassMail", item.Index, item.SecurityMailerConfig.IsResetPasswordMailEnabled, "IsResetPasswordMailEnabled", false, true)
                                    @Checkbox("secmailconf-eventMail", item.Index, item.SecurityMailerConfig.IsSecurityEventMailEnabled, "IsSecurityEventMailEnabled", false)
                                    @Html.HiddenFor(i => item.SecurityMailerConfig)
                                    @Html.HiddenFor(i => item.Id)
                                }
                                else
                                {
                                    int value;
                                    if (item.MachineName == Model.SelectOptions[0] && int.TryParse(item.Value, out value))
                                    {
                                        @Textbox("Värde", item.Index, "value" + item.Index, value, false, true)
                                        @Html.HiddenFor(i => item.Id)
                                    }
                                    else if (item.MachineName == Model.SelectOptions[0])
                                    {
                                        @Select("Välj", item.Index, "select" + item.Index, item.Value, new Dictionary<string, string> { { "High", "" }, { "Medium", "" }, { "Low", "" } })
                                        @Html.HiddenFor(i => item.Id)
                                    }
                                    else if (item.MachineName == Model.SelectOptions[1])
                                    {
                                        @Select("Välj", item.Index, "select" + item.Index, item.Value, new Dictionary<string, string> { { "Form", "" }, { "Siths", "" } })
                                        @Html.HiddenFor(i => item.Id)
                                    }
                                    else if (item.MachineName == Model.SelectOptions[2])
                                    {
                                        @Select("Välj", item.Index, "select" + item.Index, item.Value, new Dictionary<string, string> { { "", "Ingen" }, { "ordination", "Ordination" }, { "calendar", "Calendar" }, { "ordination;calendar", "Ordination and Calendar" } })
                                        @Html.HiddenFor(i => item.Id)
                                    }
                                    else
                                    {
                                        @Textbox("Sträng", item.Index, "strValue" + item.Index, item.Value, false)
                                        @Html.HiddenFor(i => item.Id)
                                    }
                                }
                                <div class="bottom">
                                    <button type="submit" id="@("button" + item.Index)" onmouseup="update(@("form" + item.Index), this.id, @(item.Index), '@(item.CategoryColor)')" onkeyup="update(@("form" + item.Index), this.id, @(item.Index), '@(item.CategoryColor)')" disabled>Uppdatera</button>
                                </div>
                            </form>
                        </div>
                    </li>
                }
            </ul>
        }
        else
        {
            <div class="note">
                <h2>Inga inställningar hittades.</h2>
            </div>
        }
    </div>
</div>
@* Templates *@
@helper Checkbox(string id, int index, bool isChecked, string description = null, bool isCentered = true, bool formGroup = false)
{
    <div class="settings-section" style="@(formGroup ? "border-width:1px 1px 0 1px" : "border-width:1px;margin-bottom:15px")">
        @if (description != null)
        {
            <label class="section-label" for="@id" title="@description">@description</label>
        }
        <div class="form-group @(isCentered ? "t-center" : "t-right")">
            <label class="checkbox-inline" for="@id">
                <input type="checkbox" id="@id" name="@id" onchange="setButtonState(@("button" + index));setCheckboxState(this.id , '@(id + "hidden" + index)')" @(isChecked ? "checked" : "") />Aktivera
            </label>
            <input type="hidden" id="@(id + "hidden" + index)" name="@id" value="@isChecked.ToString()" />
        </div>
    </div>
}
@helper Select(string labelName, int index, string id, string value, Dictionary<string, string> options)
{
string labelId = id + "label";
    <div class="select-section" style="border-width:1px;margin-bottom:15px">
        <label class="section-label attr-item" id="@labelId" for="@id">@labelName</label>
        <div class="select-wrapper">
            <select id="@id" name="@id" onchange="setButtonState(@("button" + index))">
                @foreach (var option in options)
                {
                    <option value="@option.Key" @(option.Key.ToLower() == value.ToLower() ? " selected" : "")>@(option.Value == string.Empty ? option.Key : option.Value)</option>
                }
            </select>
        </div>
    </div>
}
@helper Textbox(string labelName, int index, string id, dynamic value, bool formGroup = true, bool isNumber = false)
{
string labelId = id + "label";
    <div class="value-section">
        <label class="value-label attr-item border-r" id="@labelId" for="@id" title="@labelName">@labelName</label>
        <input type="@(isNumber ? "number" : "text")" id="@id" name="@id" value="@value" autocomplete="off" onchange="setButtonState(@("button" + index))" onkeypress="setButtonState(@("button" + index))" style="@(formGroup ? "border-width:1px 1px 0 1px" : "border-width:1px;margin-bottom:15px")" />
    </div>
}
@helper ColorInput(string labelName, int index, string id, dynamic color, bool formGroup = true)
{
string pickerId = id + "picker", labelId = id + "label", hex = @RgbToHex(color);
    <div class="value-section" style="@(formGroup ? "padding-bottom:0" : "padding-bottom:15px")">
        <label id="@(labelId)" class="value-label attr-item" for="@id" title="@labelName">@labelName</label>
        <input class="p-left" id="@id" name="@id" maxlength="7" style="@(formGroup ? "border-width:1px 1px 0 1px" : "border-width:1px")" onchange="colorPicker('@pickerId', this.id)" onkeypress="setButtonState(@("button" + index))" type="text" value="@hex" />
        <input id="@pickerId" style="@(formGroup ? "bottom:7px" : "bottom:23px")" onchange="colorPicker('@id', this.id);setButtonState(@("button" + index));" type="color" value="@hex" />
    </div>
}
@functions
{
    public string RgbToHex(dynamic color)
    {
        return "#" + (color.R.ToString("X2") + color.G.ToString("X2") + color.B.ToString("X2")).ToLower();
    }
}
