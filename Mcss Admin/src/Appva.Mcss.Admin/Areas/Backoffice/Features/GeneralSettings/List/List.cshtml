@model Appva.Mcss.Admin.Areas.Backoffice.Models.ListGeneralSettingsModel
@{
    SetTitle("Admin - Generella inställningar");
}
@Html.Partial("_BackofficeMenuPartial")

<div id="subheader" class="cf">
    <h1>Generella inställningar</h1>
</div>
<div id="content" class="cf">
    <script>
        function colorPicker(id1, id2) {
            document.getElementById(id1).value = document.getElementById(id2).value;
        }
        function rgbToHex(id1, id2, r, g, b) {
            var bin = r << 16 | g << 8 | b;
            var hex = "#" + (function (h) { return new Array(7 - h.length).join("0") + h })(bin.toString(16))
            document.getElementById(id1).value = hex;
            document.getElementById(id2).value = hex;
        }
    </script>
    <div id="content-primary">
      @if (Model.List != null && Model.List.Count() > 0)
      {
        <ul id="setlist">
            @foreach (var item in Model.List)
            {
                <li>
                    <div class="header">
                        <h3 title="@item.MachineName"><span style="background:@item.CategoryColorCode"></span>@item.Category</h3>
                        <h2>@item.Name</h2>

                        @if (item.Description != null && item.Description != string.Empty)
                        {
                            <p>@item.Description</p>
                        }
                    </div>
                    <div class="content">
                        @if (item.IntValue.HasValue) { @NumericTextbox("Värde", "value" + item.Index, item.IntValue.Value) }
                        @if (item.BoolValue.HasValue) { @Checkbox("check" + item.Index, (bool)item.BoolValue) }

                        @if (item.IsJson == true)
                        {
                            if (item.PdfLookAndFeel != null)
                            {
                                var attributes = new string[] { "value-section", "value-label attr-item", "p-left" };
                                @Checkbox("pdf-cust-footer", item.PdfLookAndFeel.IsCustomFooterTextEnabled, false, "IsCustomFooterTextEnabled")
                                @Checkbox("pdf-cust-logotype", item.PdfLookAndFeel.IsCustomFooterTextEnabled, false, "IsCustomFooterTextEnabled")
                                @ColorInput("Bakgrundsfärg", "pdf-bgcolor", item.PdfLookAndFeel.BackgroundColor)
                                @ColorInput("Typsnittsfärg", "pdf-fontcolor", item.PdfLookAndFeel.FontColor)
                                @ColorInput("Kantlinjefärg", "pdf-bordercolor", item.PdfLookAndFeel.TableBorderColor)
                                @ColorInput("Rubrikfärg", "pdf-headercolor", item.PdfLookAndFeel.TableHeaderColor)
                            }
                            else if (item.SecurityTokenConfig != null)
                            {
                                <div class="value-section">
                                    @Html.LabelFor(i => item.SecurityTokenConfig.Audience):<h5>@item.SecurityTokenConfig.Audience</h5>
                                    @Html.LabelFor(i => item.SecurityTokenConfig.Issuer):<h5>@item.SecurityTokenConfig.Issuer</h5>
                                    @Html.LabelFor(i => item.SecurityTokenConfig.ResetTokenLifetime):<h5>@item.SecurityTokenConfig.ResetTokenLifetime</h5>
                                    @Html.LabelFor(i => item.SecurityTokenConfig.RegistrationTokenLifetime):<h5>@item.SecurityTokenConfig.RegistrationTokenLifetime</h5>
                                    @Html.LabelFor(i => item.SecurityTokenConfig.SigningKey):<h5>@item.SecurityTokenConfig.SigningKey</h5>
                                </div>
                            }
                            else if (item.SecurityMailerConfig != null)
                            {
                                    @Html.FormGroup(i => item.SecurityMailerConfig.IsMailSigningEnabled, "settings-section t-right").Label(null, new { @class = "section-label attr-item", @for = "IsMailSigningEnabled" }).Checkbox("Aktivera").Validate().Build()
                                         @Html.LabelFor(i => item.SecurityMailerConfig.IsMobileDeviceRegistrationMailEnabled, new { @class = "section-label attr-item" })
                                        @Html.FormGroup(i => item.SecurityMailerConfig.IsMobileDeviceRegistrationMailEnabled, "settings-section t-right").Checkbox("Aktivera").Validate().Build()
                                        <div class="settings-section t-right">
                                            @Html.LabelFor(i => item.SecurityMailerConfig.IsRegistrationMailEnabled, new { @class = "section-label attr-item" })
                                            @Html.FormGroup(i => item.SecurityMailerConfig.IsRegistrationMailEnabled, "text").Checkbox("Aktivera").Validate().Build()
                                        </div>
                                        <div class="settings-section t-right">
                                            @Html.LabelFor(i => item.SecurityMailerConfig.IsResetPasswordMailEnabled, new { @class = "section-label attr-item" })
                                            @Html.FormGroup(i => item.SecurityMailerConfig.IsResetPasswordMailEnabled, "text").Checkbox("Aktivera").Validate().Build()
                                        </div>
                                        <div class="settings-section t-right">
                                            @Html.LabelFor(i => item.SecurityMailerConfig.IsSecurityEventMailEnabled, new { @class = "section-label attr-item" })
                                            @Html.FormGroup(i => item.SecurityMailerConfig.IsSecurityEventMailEnabled, "text").Checkbox("Aktivera").Validate().Build()
                                        </div>
                            }
                            else if (item.MachineName == item.machineNames[6])
                            {
                                if (item.Name == "logout_timeout")
                                {
                                    <div class="value-section">
                                        @Html.FormGroup(i => item.StringValue, "text").Label("Värde", new { @class = "value-label" }).TextBox(null, new { @type = "number", @class = "value-input" }).Validate().Build()
                                    </div>
                                }

                                if (item.Name == "security_level")
                                {
                                    <div class="value-section">
                                        @Html.FormGroup(i => item.StringValue, "text").Label("Värde", new { @class = "value-label" }).TextBox(null, new { @class = "value-input" }).Validate().Build()
                                    </div>
                                }
                            }
                            else if (item.MachineName == item.machineNames[5])
                            {
                                <div class="value-section">
                                    @Html.LabelFor(i => item.LdapConfig.FieldFirstName, new { @class = "value-label attr-item" })
                                    @Html.FormGroup(i => item.LdapConfig.FieldFirstName, "text").TextBox(null, new { @class = "p-left" }).Validate().Build()
                                </div>
                                    <div class="value-section">
                                        @Html.LabelFor(i => item.LdapConfig.FieldLastName, new { @class = "value-label attr-item" })
                                        @Html.FormGroup(i => item.LdapConfig.FieldLastName, "text").TextBox(null, new { @class = "p-left" }).Validate().Build()
                                    </div>
                                    <div class="value-section">
                                        @Html.LabelFor(i => item.LdapConfig.FieldHsaId, new { @class = "value-label attr-item" })
                                        @Html.FormGroup(i => item.LdapConfig.FieldHsaId, "text").TextBox(null, new { @class = "p-left" }).Validate().Build()
                                    </div>
                                    <div class="value-section">
                                        @Html.LabelFor(i => item.LdapConfig.FieldMail, new { @class = "value-label attr-item" })
                                        @Html.FormGroup(i => item.LdapConfig.FieldMail, "text").TextBox(null, new { @class = "p-left" }).Validate().Build()
                                    </div>
                                    <div class="value-section">
                                        @Html.LabelFor(i => item.LdapConfig.FieldPin, new { @class = "value-label attr-item" })
                                        @Html.FormGroup(i => item.LdapConfig.FieldPin, "text").TextBox(null, new { @class = "p-left" }).Validate().Build()
                                    </div>
                                    <div class="value-section">
                                        @Html.LabelFor(i => item.LdapConfig.FieldUniqueIdentifier, new { @class = "value-label attr-item" })
                                        @Html.FormGroup(i => item.LdapConfig.FieldUniqueIdentifier, "text").TextBox(null, new { @class = "p-left" }).Validate().Build()
                                    </div>
                                    <div class="value-section">
                                        @Html.LabelFor(i => item.LdapConfig.FieldUsername, new { @class = "value-label attr-item" })
                                        @Html.FormGroup(i => item.LdapConfig.FieldUsername, "text").TextBox(null, new { @class = "p-left" }).Validate().Build()
                                    </div>
                                    <div class="value-section">
                                        @Html.LabelFor(i => item.LdapConfig.LdapPassword, new { @class = "value-label attr-item" })
                                        @Html.FormGroup(i => item.LdapConfig.LdapPassword, "text").TextBox(null, new { @class = "p-left" }).Validate().Build()
                                    </div>
                                    <div class="value-section">
                                        @Html.LabelFor(i => item.LdapConfig.LdapUser, new { @class = "value-label attr-item" })
                                        @Html.FormGroup(i => item.LdapConfig.LdapUser, "text").TextBox(null, new { @class = "p-left" }).Validate().Build()
                                    </div>
                                    <div class="value-section">
                                        @Html.LabelFor(i => item.LdapConfig.LdapString, new { @class = "value-label attr-item" })
                                        @Html.FormGroup(i => item.LdapConfig.LdapString, "text").TextBox(null, new { @class = "p-left" }).Validate().Build()
                                    </div>
                            }
                            else if (item.MachineName == item.machineNames[6])
                            {
                                <div class="value-section">
                                    @Html.FormGroup(i => item.StringValue, "text").Label("Värde", new { @class = "value-label" }).TextBox(item.StringValue, new { @class = "value-input" }).Validate().Build()
                                </div>
                            }
                            else
                            {
                                <div class="value-section">
                                    @Html.FormGroup(i => item.StringValue, "text").Label("Värde", new { @class = "value-label" }).TextBox(item.StringValue, new { @class = "value-input" }).Validate().Build()
                                </div>
                            }
                        }
                        else if(item.StringValue != null)
                        {

                        }
                    </div>
                </li>
            }
        </ul>
      }
      else
      {
            <div class="note">
                <h2>Inga inställningar hittades.</h2>
            </div>
        }
    </div>
</div>

@* Templates *@
@helper Checkbox(string id, bool isChecked, bool isCentered = true, string description = null)
{
    <div class="settings-section @(isCentered ? "t-center" : "t-right")">
        @if (description != null)
        {
            <label class="section-label attr-item" for="@id" title="@description">@description</label>
        }
        <label class="checkbox-inline" for="@id">
            <input type="checkbox" id="@id" name="@id" @(isChecked ? "checked" : "") />Aktivera
        </label>
    </div>
}
@helper NumericTextbox(string labelName, string id, int value)
{
    <div class="value-section">
        <label class="value-label" for="@id">@labelName</label>
        <input type="number" id="@id" name="@id" value="@value" autocomplete="off" />
    </div>
}
@helper ColorInput(string labelName, string id, dynamic color)
{
    string pickerId = id + "picker";
    string hex = @RgbToHex(color);
    <div class="value-section">
        <label class="value-label attr-item" for="@id">@labelName</label>
        <input class="p-left" id="@id" name="@id" onchange="colorPicker('@pickerId', this.id)" type="text" value="@hex" />
        <input id="@pickerId" onchange="colorPicker('@id', this.id)" type="color" value="@hex" />
    </div>
}
@functions
{
    public string RgbToHex(dynamic color)
    {
        return "#" + (color.R.ToString("X2") + color.G.ToString("X2") + color.B.ToString("X2")).ToLower();
    }
}
