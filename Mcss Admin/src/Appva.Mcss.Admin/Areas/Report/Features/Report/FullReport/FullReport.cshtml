@model Appva.Mcss.Admin.Areas.Models.FullReportModel
@using Appva.Mcss.Admin.Application.Common;
@{ 
    SetTitle("Översikt"); 
    ViewBag.MainClass = "report-view"; 
}
<div id="subheader" class="cf">
	<h1>Fullständig resultatrapport</h1>
    @Html.ActionLink("Exportera till Excel", "Excel", new { ScheduleSettingsId = Model.ScheduleSetting, StartDate = Model.Start.ToShortDateString(), EndDate = Model.End.ToShortDateString() }, new { @class = "export", download = string.Format("MCSS-rapport-{0}.xlsx", DateTime.Now.ToFileTimeUtc()) })
</div>
<div id="content" class="has-nav cf">
    <ul id="nav-sub">
        @if (Model.Schedules.IsNotNull()) {
            <li class="@(!Model.ScheduleSetting.HasValue ? "sel" : "")">
                @Html.ActionLink("Alla", "FullReport", new { Start = Model.Start.ToShortDateString(), End = Model.End.ToShortDateString() })
            </li>
            foreach (var schedule in Model.Schedules) {
                <li class="@(Model.ScheduleSetting.HasValue && Model.ScheduleSetting.Value.Equals(schedule.Id) ? "sel" : "")">
                    @Html.ActionLink(schedule.Name, "FullReport", new { ScheduleSetting = schedule.Id, Start = Model.Start.ToShortDateString(), End = Model.End.ToShortDateString() })
                </li>
            }
        }
	</ul>
	<div id="content-primary">
        <div id="status-filter" class="cf">
            <h2>Visa rapport för:</h2>
            
            @using (Html.BeginForm("Index", "Report", FormMethod.Get)) {
                <div class="dates cf">
                    @Html.FormGroup(x => x.Start, "select").Label("Start").Editor(DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd")).Build()
			        @Html.FormGroup(x => x.End, "select").Label("Slut").Editor(DateTime.Now.ToString("yyyy-MM-dd")).Build()
		        </div>
                <div class="dates submit">
                    @Html.HiddenFor(m => m.ScheduleSetting)
                    @Html.Submit("Visa")
                </div>    
            }
        </div>
		<div id="report" class="cf">
            <div id="chart" class="chart" style="height: 250px; margin-bottom:20px;"></div>
			@Html.Partial("/Features/Statistics/Data/StatisticsData.cshtml", Model.Report)

            @if (Model.Tasks != null && Model.Tasks.Items.Count() > 0)
            {
            <div id="signed-events" class="listing">
			    <h2 class="heading">Insatser under perioden</h2>
                <table>
				    <thead>
					    <tr class="head">
						    <th scope="col">Gavs</th>
						    <th scope="col">Dag</th>
						    <th scope="col">Tid</th>
						    <th scope="col">Skulle ges</th>
                            <th scope="col">Boende</th>
                            <th scope="col">Signerat av</th>
						    <th scope="col">Status</th>
					    </tr>
				    </thead>
				    <tbody>
                        @foreach (var task in Model.Tasks.Items)
                        {

    <tr class="@(!task.IsActive ? "modified" : "") @((task.Delayed || (task.Status > 1 && task.Status < 5)) || (task.StatusTaxon.IsNotNull() ? task.StatusTaxon.Weight > 1 : false) ? "alarm" : "")">
        <td>@task.Name</td>
        <td>
            @if (!task.IsCompleted) {
                @:-
            }
            else {
                if (task.OnNeedBasis) {
                    @TimeSpanDifference.ToShortDateTime(task.UpdatedAt, "Idag", "Igår")
                }
                else {
                    @TimeSpanDifference.ToShortDateTime(task.CompletedDate.GetValueOrDefault(), "Idag", "Igår")
                }
            }
           
        </td>

		<td>
            @if (task.Delayed && task.CompletedBy.IsNull()) {
                @:Ej signerad
            } else {
                if (task.OnNeedBasis) {
					@:kl @String.Format("{0:HH:mm}", task.UpdatedAt)
				} else {
                    @:kl @String.Format("{0:HH:mm}", task.CompletedDate.GetValueOrDefault())
				}

            }            
        </td>
        <td>
            @TimeSpanDifference.ToShortDateTime(task.Scheduled, "Idag", "Igår") kl @String.Format("{0:HH:mm}", task.Scheduled)
            @if (task.RangeInMinutesBefore.Equals(task.RangeInMinutesAfter)) {
                @:±@task.RangeInMinutesBefore min
                                }
            else {
                @:+@task.RangeInMinutesAfter -@task.RangeInMinutesBefore min
                                }
        </td>
        <td>
            @task.Patient.FullName
        </td>
        <td>
            @if (task.CompletedBy.IsNotNull()) {
                @task.CompletedBy.FullName
            }
            else {
                @:--
                                }
        </td>
        <td>
            @if (task.StatusTaxon != null) {
                <img src="@Url.Image(task.StatusTaxon.Path)" alt="@task.StatusTaxon.Name" />
                if (task.Delayed && task.StatusTaxon.Weight < 2) {
                    <strong>Avvikelse:</strong> @(string.Format("{0} för sent", task.StatusTaxon.Name))
                }
                else if (task.StatusTaxon.Weight > 1) {
                    <strong>Avvikelse:</strong> @task.StatusTaxon.Name
                }
                else {
                    @task.StatusTaxon.Name
                }
            }
            else {
                if (task.Status.Equals(1)) {
                    <img src="@Url.Image("icn-ok.png")" alt="OK" />
                    if (task.Delayed) {
                        <strong>Avvikelse:</strong> @:Given för sent
									    }
                    else {
                        @:OK
									    }
                }
                else if (task.Status.Equals(2)) {
                    <img src="@Url.Image("icn-part.png")" alt="Delvis given" />
                    <strong>Avvikelse:</strong> @:Delvis given
                                    }
                else if (task.Status.Equals(3)) {
                    <img src="@Url.Image("icn-none.png")" alt="Ej given" />
                    <strong>Avvikelse:</strong> @:Ej given
                                    }
                else if (task.Status.Equals(4)) {
                    <img src="@Url.Image("icn-nothx.png")" alt="Kan ej ta" />
                    <strong>Avvikelse:</strong> @: Kan ej ta
                                    }
                else if (task.Status.Equals(5)) {
                    <img src="@Url.Image("icn-sent.png")" alt="Medskickad" /> @:Medskickad
                                    }
                else if (task.Status.Equals(6)) {
                    <img src="@Url.Image("icn-none.png")" alt="Larm" />
                    <strong>Avvikelse:</strong> @:Räknad mängd stämmer ej med saldo
                                    }
                else {
                    if (task.Delayed) {
                        <img src="@Url.Image("icn-alarm.png")" alt="Larm" />
                        <strong>Avvikelse:</strong>
                        if (task.DelayHandled) {
                            if (Html.HasPermissionFor(Permissions.Alert.Read))
                            {
                                @Html.ActionLink("Larm åtgärdat", "List", "Alerts", new { Area = "patient", id = task.Patient.Id }, null)
                            }
                            else
                            {
                                @:Larm åtgärdat    
                            }
                        }
                        else {
                            @:Ej given
                                            }
                    }
                }
            }
        </td>

    </tr>
}
				    </tbody>
			    </table>
		    </div>
            @Html.Pager((int)Model.Tasks.PageQuery.PageSize, (int)Model.Tasks.PageQuery.PageNumber, (int) Model.Tasks.TotalCount).Options(o => o
                .DisplayTemplate("Pagination")
                .MaxNrOfPages(15)
                .AlwaysAddFirstPageNumber()
                .AddRouteValue("ScheduleSetting", Model.ScheduleSetting)
                .AddRouteValue("Start", Model.Start.ToShortDateString())
                .AddRouteValue("End", Model.End.ToShortDateString())
                )
            }
        </div>
	</div>

</div>
<script type="text/javascript">
    $(function () {
        Date.format = 'yyyy-mm-dd';
        $('.datepick').datePicker({
            'startDate': '1970-01-01',
            'clickInput': true 
        });
        $('#status-filter form').validate({
            'rules': {
                'StartDate': {
                    'date': true,
                    'datelessthan': [$('#EndDate')]
                },
                'EndDate': {
                    'date': true,
                    'dategreaterthan': [$('#StartDate')]
                }
            },
            'messages': {
                'StartDate': {
                    'date': "Datum måste fyllas i med åtta siffror och bindestreck, t. ex. 2012-12-21.",
                    'datelessthan': "Startdatum måste vara ett tidigare datum är slutdatum."
                },
                'EndDate': {
                    'date': "Datum måste fyllas i med åtta siffror och bindestreck, t. ex. 2012-12-21.",
                    'dategreaterthan': "Slutdatum måste vara ett senare datum är startdatum."
                }
            }
        });
        mcss.chart.Load({ 
            'selector': '#chart',
            'url': '@Url.Action("GetChartData", "Statistics", new { area = "" })',
            'min': new Date(@Model.Start.Year, @(Model.Start.Month - 1), @Model.Start.Day),
            'max': new Date(@Model.End.Year, @(Model.End.Month - 1), @Model.End.Day),
            'parameters': {
                'ScheduleSetting': '@Model.ScheduleSetting', 
                'Start': '@Model.Start.ToShortDateString()',
                'End': '@Model.End.ToShortDateString()'
            }
        });

    });
</script>