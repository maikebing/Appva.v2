@model Appva.Mcss.Admin.Areas.Models.FullReportModel
@using Appva.Mcss.Admin.Application.Common;
@{ 
    SetTitle(Localizer["Översikt"].ToString()); 
    ViewBag.MainClass = "report-view"; 
}
<div id="subheader" class="cf">
	<h1>@Localizer["Fullständig_resultatrapport"]</h1>
    @Html.ActionLink(Localizer["Exportera_till_Excel"].ToString(), "Excel", new { ScheduleSettingsId = Model.ScheduleSetting, StartDate = Model.Start.ToShortDateString(), EndDate = Model.End.ToShortDateString() }, new { @class = "export", download = string.Format("MCSS-rapport-{0}.xlsx", DateTime.Now.ToFileTimeUtc()) })
</div>
<div id="content" class="has-nav cf">
    <ul id="nav-sub">
        @if (Model.Schedules.IsNotNull()) {
            <li class="@(!Model.ScheduleSetting.HasValue ? "sel" : "")">
                @Html.ActionLink(Localizer["Alla"].ToString(), "FullReport", new { Start = Model.Start.ToShortDateString(), End = Model.End.ToShortDateString() })
            </li>
            foreach (var schedule in Model.Schedules) {
                <li class="@(Model.ScheduleSetting.HasValue && Model.ScheduleSetting.Value.Equals(schedule.Id) ? "sel" : "")">
                    @Html.ActionLink(schedule.Name, "FullReport", new { ScheduleSetting = schedule.Id, Start = Model.Start.ToShortDateString(), End = Model.End.ToShortDateString() })
                </li>
            }
        }
	</ul>
	<div id="content-primary">
        <div id="status-filter" class="cf">
            <h2>@Localizer["Visa_rapport_för_"]</h2>
            @using (Html.BeginForm("Index", "Report", FormMethod.Get)) {
                <div class="dates cf">
			        <div class="select">
                        @Html.LabelFor(m => m.Start)
                        @Html.EditorFor(m => m.Start)
			        </div>
			        <div class="select">
                        @Html.LabelFor(m => m.End)
                        @Html.EditorFor(m => m.End)
			        </div>
		        </div>
                <div class="dates submit">
                    @Html.HiddenFor(m => m.ScheduleSetting)
                    @Html.Submit(Localizer["Visa"].ToString())
                </div>    
            }
        </div>
		<div id="report" class="cf">
            <div id="chart" class="chart" style="height: 250px; margin-bottom:20px;"></div>
			@Html.Partial("/Features/Statistics/Data/StatisticsData.cshtml", Model.Report)

            @if (Model.Tasks != null && Model.Tasks.Entities.Count() > 0) {
            <div id="signed-events" class="listing">
			    <h2 class="heading">@Localizer["Insatser_under_perioden"]</h2>
                <table>
				    <thead>
					    <tr class="head">
						    <th scope="col">@Localizer["Gavs"]</th>
						    <th scope="col">@Localizer["Dag"]</th>
						    <th scope="col">@Localizer["Tid"]</th>
						    <th scope="col">@Localizer["Skulle_ges"]</th>
                            <th scope="col">@Localizer["Boende"]</th>
                            <th scope="col">@Localizer["Signerat_av"]</th>
						    <th scope="col">@Localizer["Status"]</th>
					    </tr>
				    </thead>
				    <tbody>
                        @foreach (var task in Model.Tasks.Entities) {

    <tr class="@(!task.IsActive ? "modified" : "") @((task.Delayed || (task.Status > 1 && task.Status < 5)) || (task.StatusTaxon.IsNotNull() ? task.StatusTaxon.Weight > 1 : false) ? "alarm" : "")">
        <td>@task.Name</td>
        <td>
            @if (!task.IsCompleted) {
                @:-
            }
            else {
                if (task.OnNeedBasis) {
                    @TimeSpanDifference.ToShortDateTime(task.UpdatedAt, Localizer["Idag"].ToString(), Localizer["Igår"].ToString())
                }
                else {
                    @TimeSpanDifference.ToShortDateTime(task.CompletedDate.GetValueOrDefault(), Localizer["Idag"].ToString(), Localizer["Igår"].ToString())
                }
            }
           
        </td>

		<td>
            @if (task.Delayed && task.CompletedBy.IsNull()) {
                @Localizer["Ej_signerad"]
            } else {
                if (task.OnNeedBasis) {
					@:kl @String.Format("{0:HH:mm}", task.UpdatedAt)
				} else {
                    @:kl @String.Format("{0:HH:mm}", task.CompletedDate.GetValueOrDefault())
				}

            }            
        </td>
        <td>
            @TimeSpanDifference.ToShortDateTime(task.Scheduled, "Idag", "Igår") kl @String.Format("{0:HH:mm}", task.Scheduled)
            @if (task.RangeInMinutesBefore.Equals(task.RangeInMinutesAfter)) {
                @:±@task.RangeInMinutesBefore min
                                }
            else {
                @:+@task.RangeInMinutesAfter -@task.RangeInMinutesBefore min
                                }
        </td>
        <td>
            @task.Patient.FullName
        </td>
        <td>
            @if (task.CompletedBy.IsNotNull()) {
                @task.CompletedBy.FullName
            }
            else {
                @:--
                                }
        </td>
        <td>
            @if (task.StatusTaxon != null) {
                <img src="@Url.Image(task.StatusTaxon.Path)" alt="@task.StatusTaxon.Name" />
                if (task.Delayed && task.StatusTaxon.Weight < 2) {
                    <strong>@Localizer["Avvikelse_"]</strong> @Localizer["{0}_för_sent", task.StatusTaxon.Name]
                }
                else if (task.StatusTaxon.Weight > 1) {
                    <strong>@Localizer["Avvikelse_"]</strong> @task.StatusTaxon.Name
                }
                else {
                    @task.StatusTaxon.Name
                }
            }
            else {
                if (task.Status.Equals(1)) {
                    <img src="@Url.Image("icn-ok.png")" alt="OK" />
                    if (task.Delayed) {
                        <strong>@Localizer["Avvikelse_"]</strong> @Localizer["Given_för_sent"]
									    }
                    else {
                        @Localizer["OK"]
									    }
                }
                else if (task.Status.Equals(2)) {
                    <img src="@Url.Image("icn-part.png")" alt="Delvis given" />
                    <strong>@Localizer["Avvikelse_"]</strong> @Localizer["Delvis_given"]
                                    }
                else if (task.Status.Equals(3)) {
                    <img src="@Url.Image("icn-none.png")" alt="Ej given" />
                    <strong>@Localizer["Avvikelse_"]</strong> @Localizer["Ej_given"]
                                    }
                else if (task.Status.Equals(4)) {
                    <img src="@Url.Image("icn-nothx.png")" alt="Kan ej ta" />
                    <strong>@Localizer["Avvikelse_"]</strong> @Localizer["Kan_ej_ta"]
                                    }
                else if (task.Status.Equals(5)) {
                    <img src="@Url.Image("icn-sent.png")" alt="Medskickad" /> @Localizer["Medskickad"]
                                    }
                else if (task.Status.Equals(6)) {
                    <img src="@Url.Image("icn-none.png")" alt="Larm" />
                    <strong>@Localizer["Avvikelse_"]</strong> @Localizer["Räknad_mängd_stämmer_ej_med_saldo"]
                                    }
                else {
                    if (task.Delayed) {
                        <img src="@Url.Image("icn-alarm.png")" alt="Larm" />
                        <strong>@Localizer["Avvikelse_"]</strong>
                        if (task.DelayHandled) {
                            if (Html.HasPermissionFor(Permissions.Alert.Read))
                            {
                                @Html.ActionLink(Localizer["Larm_åtgärdat"].ToString(), "List", "Alerts", new { Area = "patient", id = task.Patient.Id }, null)
                            }
                            else
                            {
                                @Localizer["Larm_åtgärdat"]
                            }
                        }
                        else {
                            @Localizer["Ej_given"]
                                            }
                    }
                }
            }
        </td>

    </tr>
}
				    </tbody>
			    </table>
		    </div>
            @Html.Pager((int)Model.Tasks.PageSize, (int)Model.Tasks.CurrentPage, (int)Model.Tasks.TotalCount).Options(o => o
                .DisplayTemplate("Pagination")
                .MaxNrOfPages(15)
                .AlwaysAddFirstPageNumber()
                .AddRouteValue("ScheduleSetting", Model.ScheduleSetting)
                .AddRouteValue("Start", Model.Start.ToShortDateString())
                .AddRouteValue("End", Model.End.ToShortDateString())
                )
            }
        </div>
	</div>

</div>
<script type="text/javascript">
    $(function () {
        Date.format = 'yyyy-mm-dd';
        $('.datepick').datePicker({
            'startDate': '1970-01-01',
            'clickInput': true
        });
        $('#status-filter form').validate({
            'rules': {
                'StartDate': {
                    'date': true,
                    'datelessthan': [$('#EndDate')]
                },
                'EndDate': {
                    'date': true,
                    'dategreaterthan': [$('#StartDate')]
                }
            },
            'messages': {
                'StartDate': {
                    'date': "@Localizer["Datum_måste_fyllas_i_med_åtta_siffror_och_bindestreck__t__ex__2012-12-21"]",
                    'datelessthan': "@Localizer["Startdatum_måste_vara_ett_tidigare_datum_är_slutdatum"]"
                },
                'EndDate': {
                    'date': "@Localizer["Datum_måste_fyllas_i_med_åtta_siffror_och_bindestreck__t__ex__2012-12-21"]",
                    'dategreaterthan': "@Localizer["Slutdatum_måste_vara_ett_senare_datum_är_startdatum"]"
                }
            }
        });
        mcss.chart.Load({
            'selector': '#chart',
            'url': '@Url.Action("GetChartData", "Statistics", new { area = "" })',
            'min': new Date(@Model.Start.Year, @(Model.Start.Month - 1), @Model.Start.Day),
            'max': new Date(@Model.End.Year, @(Model.End.Month - 1), @Model.End.Day),
            'parameters': {
                'ScheduleSetting': '@Model.ScheduleSetting',
                'Start': '@Model.Start.ToShortDateString()',
                'End': '@Model.End.ToShortDateString()'
            }
        });

    });
</script>