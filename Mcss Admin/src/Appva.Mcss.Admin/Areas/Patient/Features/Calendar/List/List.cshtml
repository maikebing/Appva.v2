@using Appva.Mcss.Admin.Application.Common
@model Appva.Mcss.Web.ViewModels.EventListViewModel
@{ ViewBag.Title = "List"; }
@Html.Partial("~/Areas/Patient/Features/Patient/Partials/_PatientDetails.cshtml", Model.Patient)
@Html.Partial("~/Features/Shared/_SubMenuPartial.cshtml", Model.Patient)
@section JavaScript {
    <script type="text/javascript" src="../../Assets/js/mcss.calendar.lb.js"></script>
    <script type="text/javascript">
        var CategorySettings = {
            '': { Absent: false },
            @foreach (var cat in Model.CategorySettings) {
                <text>
            @Html.Raw(string.Format("'{0}' : {{ Absent : {1}}},", cat.Id, cat.Absence.ToString().ToLower()))
            </text>
            }
        };
    </script>
}
<div id="subheader" class="cf">
    <h1>Kalender</h1>
    @Html.ActionLink(Permissions.Calendar.Create, "Ny aktivitet", "Create", "Calendar", new { Id = Model.Patient.Id, Date = Model.Current }, new { @class = "btn lb-link" })
</div>
<div id="content" class="cf">
	<div id="content-primary">
        <div class="cal-wrap cf">
        @using (Html.BeginForm("List", "Event", FormMethod.Get, new { }))
        {
            <div class="h cal-h cf">
			    <h2>@String.Format("{0:MMMM yyyy}", Model.Current).FirstToUpper()</h2>
                <input type="hidden" name="date" value="@Model.Current" />
                <input type="submit" name="prev" value="@String.Format("{1} {0}", Model.Previous.ToString("MMMM").FirstToUpper(), WebUtility.HtmlDecode("&larr;"))" class="prev" />
                <input type="submit" name="next" value="@String.Format("{0:MMMM} {1}", Model.Next, WebUtility.HtmlDecode("&rarr;")).FirstToUpper()" class="next" />
		    </div>
            <div class="cal-filter">
                @Html.ActionLink(Permissions.Calendar.Create, "+ Skapa ny aktivitet", "Create", "Calendar", new { Id = Model.Patient.Id, Date = Model.Current }, new { @class = "btn btn-new lb-link" })
                <h3>Filtrera på kategori:</h3>
                    <ul>
                        <li class="all">
                            <span class="cal-all">
                                @Html.CheckBox("cal-all", Model.FilterList.Count == 0, new { @id = "cal-all" })
                            </span>
                            @Html.Label("cal-all", "Alla kategorier")
                        </li>
                        @foreach (var cat in Model.Categories)
                        {
                            Model.FilterList.Contains(cat.Value.Id.ToString());
                            <li>
                                <span class="@(string.Format("cal-cat{0}", (cat.Key % (int)Model.CalendarSettings["ColorQuantity"]) + 1))">
                                    <input type="checkbox" name="filter" value=@cat.Value.Id id=@String.Format("cal-cat{0}", (cat.Key % (int)Model.CalendarSettings["ColorQuantity"]) + 1) @(Model.FilterList.Contains(cat.Value.Id.ToString()) ? "checked=checked" : "") />
                                </span>
                                @Html.Label(string.Format("cal-cat{0}", (cat.Key % (int)Model.CalendarSettings["ColorQuantity"]) + 1), cat.Value.Name)
                            </li>
                        }
                        @Html.Submit("Välj")
                    </ul>
            
            </div>
        }
		    <div id="calendar">
			    <table>
				    <thead>
					    <tr>
                            @{
                                var firstDayOfWeek = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek;
                                var daysOfWeek = new List<string>() {
                                    DayOfWeek.Monday.Equals(firstDayOfWeek) ? "Måndag" : "Söndag",
                                    DayOfWeek.Monday.Equals(firstDayOfWeek) ? "Tisdag" : "Måndag",
                                    DayOfWeek.Monday.Equals(firstDayOfWeek) ? "Onsdag" : "Tisdag",
                                    DayOfWeek.Monday.Equals(firstDayOfWeek) ? "Torsdag" : "Onsdag",
                                    DayOfWeek.Monday.Equals(firstDayOfWeek) ? "Fredag" : "Torsdag",
                                    DayOfWeek.Monday.Equals(firstDayOfWeek) ? "Lördag" : "Fredag",
                                    DayOfWeek.Monday.Equals(firstDayOfWeek) ? "Söndag" : "Lördag"
                                };
                            }
                            @foreach (var day in daysOfWeek)
                            {
                                <th scope="col">@day</th>
                            }
					    </tr>
				    </thead>
				    <tbody>
                        @foreach (var calendar in Model.Calendar)
                        {
                            if (Model.IsBeginningOfWeek())
                            {
                                @:<tr>
                            }
                            var cssClass = (calendar.IsWithinMonth) ? "active" : "inactive";
                            cssClass += (calendar.IsToday) ? " today" : string.Empty;   
                            <td class="@cssClass">
							    <span class="slot">
								    <span class="day">@calendar.Date.Day</span>
								    @if (calendar.IsWithinMonth)
                                    {
                                        foreach (var evt in calendar.Events)
                                        {
                                            <span class="@String.Format("act cal-cat{0}", (Model.Categories.FirstOrDefault(x => x.Value == evt.Schedule.ScheduleSettings).Key % (int)Model.CalendarSettings["ColorQuantity"]) + 1)" @((Model.FilterList.Count == 0 || Model.FilterList.Contains(evt.Schedule.ScheduleSettings.Id.ToString())) ? "" : "style=Display:none;")>
										        <span class="time">
                                                    @if (evt.AllDay)
                                                    {
                                                        @:Hela dagen
                                                    }
                                                    else
                                                    {
                                                        @String.Format("{0:HH:mm} - {1:HH:mm}", evt.StartDate, evt.EndDate);
                                                    }
                                                </span>
										        @evt.Schedule.ScheduleSettings.Name
                                                <span class="act-info">
                                                    <strong>Anteckningar/instruktion:</strong>
                                                    <span>
                                                        @evt.Sequence.Description
                                                    </span>
                                                </span>
                                                <span class="actions">
                                                    @if (evt.Id.NotEqual(Guid.Empty)) {
                                                        @Html.ActionLink(Permissions.Calendar.Update, "Ändra", "EditActivity", "Calendar", new { Id = Model.Patient.Id, TaskId = evt.Id }, new { @class = "edit lb-link", @title = "Ändra aktiviteten" })
                                                        @Html.ActionLink(Permissions.Calendar.Delete, "Ta bort", "RemoveActivity", "Calendar", new { Id = Model.Patient.Id, TaskId = evt.Id }, new { @class = "del", @title = "Ta bort aktiviteten" })
                                                    }
                                                    else { 
                                                        @Html.ActionLink(Permissions.Calendar.Update, "Ändra", "Edit", "Calendar", new { Id = Model.Patient.Id, SequenceId = evt.Sequence.Id, Date = calendar.Date }, new { @class = "edit lb-link", @title = "Ändra aktiviteten" })
                                                        @Html.ActionLink(Permissions.Calendar.Delete, "Ta bort", "Remove", "Calendar", new { Id = Model.Patient.Id, SequenceId = evt.Sequence.Id, Date = calendar.Date }, new { @class = "del", @title = "Ta bort aktiviteten" })
                                                    }
										        </span>
									        </span>
                                        }
                                    }
							    </span>
						    </td>
                            if (Model.IsEndOfWeek())
                            {
                                Model.WeekIterator = 0;
                                @:</tr>
                            }
                            Model.WeekIterator = Model.WeekIterator + 1;
                        }
                    </tbody>
                </table>
            </div>
        </div>
		
    </div>
</div>