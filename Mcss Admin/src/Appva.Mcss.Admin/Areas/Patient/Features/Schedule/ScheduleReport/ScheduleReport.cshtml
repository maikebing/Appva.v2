@model Appva.Mcss.Web.ViewModels.ScheduleReportViewModel
@{ ViewBag.Title = "Rapport"; ViewBag.MainClass = "report-view"; }
@Html.Partial("~/Areas/Patient/Features/Patient/Partials/_PatientDetails.cshtml", Model.Patient)
    @Html.Partial("~/Features/Shared/_SubMenuPartial.cshtml", Model.Patient)
<div id="subheader" class="cf">
	<h1>Rapport</h1>
	    @using(Html.Post()) {
        <p class="filter">
            @Html.LabelFor(m => m.StartDate)
            @Html.EditorFor(m => m.StartDate)
            @Html.LabelFor(m => m.EndDate)
            @Html.EditorFor(m => m.EndDate) 
            @Html.Submit("Visa")
        </p>
        }
	<a class="btn print" href="#">Skriv ut</a>
   @Html.ActionLink("Exportera till Excel", "Excel", "Schedule", new { Id = Model.Patient.Id, ScheduleSettingsId = Model.Schedule, StartDate = Model.StartDate, EndDate = Model.EndDate }, new { @class = "export" })

</div>
<div id="content" class="has-nav cf">
    <ul id="nav-sub">
        @if (Model.Schedules.IsNotNull()) {
            <li class="@(!Model.Schedule.HasValue ? "sel" : "")">
                @Html.ActionLink("Alla", "ScheduleReport", new { Id = Model.Patient.Id, StartDate = Model.StartDate.ToShortDateString(), EndDate = Model.EndDate.ToShortDateString() })
            </li>
            foreach (var schedule in Model.Schedules) {
                <li class="@(Model.Schedule.HasValue && Model.Schedule.Value.Equals(schedule.Id) ? "sel" : "")">
                    @Html.ActionLink(schedule.Name, "ScheduleReport", new { id = Model.Patient.Id, scheduleSettingsId = schedule.Id, startDate = Model.StartDate.ToShortDateString(), endDate = Model.EndDate.ToShortDateString() })
                </li>
            }
        }
	</ul>
	<div id="content-primary">
        <div id="report" class="cf">
            <div id="chart" class="chart" style="height: 250px; margin-bottom:20px;"></div>

			@Html.Partial("/Features/Statistics/Data/StatisticsData.cshtml", Model.Report)

            @if (Model.Tasks.Entities.Count > 0) {
            <div id="signed-events" class="listing">
			    <h2 class="heading">Insatser under perioden</h2>
                <table>
				    <thead>
					    <tr class="head">
						    <th scope="col">Gavs</th>
						    <th scope="col">Dag</th>
						    <th scope="col">Tid</th>
						    <th scope="col">Skulle ges</th>
                            <th scope="col">Boende</th>
                            <th scope="col">Signerat av</th>
						    <th scope="col">Status</th>
					    </tr>
				    </thead>
				    <tbody>
                        @foreach (var task in Model.Tasks.Entities) {
    <tr class="@(!task.IsActive ? "modified" : "") @((task.Delayed || (task.Status > 1 && task.Status < 5) || (task.StatusTaxon.IsNotNull() ? task.StatusTaxon.Weight > 1 : false)) ? "alarm" : "")">
						    <td>@task.Name</td>
						    <td>
                                @if (task.OnNeedBasis) {
                                    @TimeSpanDifference.ToShortDateTime(task.UpdatedAt, "Idag", "Igår")
                                } else {
                                    if (!task.IsCompleted) {
                                        @:-
                                    }
                                    else {
                                        @TimeSpanDifference.ToShortDateTime(task.CompletedDate.GetValueOrDefault(), "Idag", "Igår")
                                    }
                                }
                            </td>
						    <td>
                                @if (task.Delayed && task.CompletedBy.IsNull()) {
                                    @:Ej signerad
                                } else {
                                    if (task.OnNeedBasis) {
										@:kl @String.Format("{0:HH:mm}", task.UpdatedAt)
									} else {
                                        @:kl @String.Format("{0:HH:mm}", task.CompletedDate.GetValueOrDefault())
									}
                                }
                            </td>
						    <td>
                                @TimeSpanDifference.ToShortDateTime(task.Scheduled, "Idag", "Igår") kl @String.Format("{0:HH:mm}", task.Scheduled)
                                @if (task.RangeInMinutesBefore.Equals(task.RangeInMinutesAfter)) {
                                    @:±@task.RangeInMinutesBefore min
                                }
            else {
                                    @:+@task.RangeInMinutesAfter -@task.RangeInMinutesBefore min
                                }
                            </td>
                            <td>
                                @task.Patient.FullName
                            </td>
                            <td>
                                @if (task.CompletedBy.IsNotNull()) {
                                    @task.CompletedBy.FullName
            }
            else {
                                    @:--
                                }
                            </td>
                            <td>
            @if (task.StatusTaxon != null) {
                                    <img src="@Url.Image(task.StatusTaxon.Path)" alt="@task.StatusTaxon.Name" />
                if (task.Delayed && task.StatusTaxon.Weight < 2) {
                                        <strong>Avvikelse:</strong> @String.Format("{0} för sent", task.StatusTaxon.Name)
                                    }
                else if (task.StatusTaxon.Weight > 1) {
                                        <strong>Avvikelse:</strong> @task.StatusTaxon.Name
                                    }
                else {
                                        @task.StatusTaxon.Name
                                    }
                                }
            else {
                if (task.Status.Equals(1)) {
                                        <img src="@Url.Image("icn-ok.png")" alt="OK" />
                                        if (task.Delayed) {
                                            <strong>Avvikelse:</strong> @:Given för sent
                                        }
                    else {
                                            @:OK
                                        }
                }
                else if (task.Status.Equals(2)) {
                                        <img src="@Url.Image("icn-part.png")" alt="Delvis given" />
                                        <strong>Avvikelse:</strong> @:Delvis given
                                    }
                else if (task.Status.Equals(3)) {
                                        <img src="@Url.Image("icn-none.png")" alt="Ej given" />
                                        <strong>Avvikelse:</strong> @:Ej given
                                    }
                else if (task.Status.Equals(4)) {
                                        <img src="@Url.Image("icn-nothx.png")" alt="Kan ej ta" />
                                        <strong>Avvikelse:</strong> @: Kan ej ta
                                    }
                else if (task.Status.Equals(5)) {
                                        <img src="@Url.Image("icn-sent.png")" alt="Medskickad" /> @:Medskickad
                                    }
                else if (task.Status.Equals(6)) {
                                        <img src="@Url.Image("icn-none.png")" alt="Larm" />
                                        <strong>Avvikelse:</strong> @:Räknad mängd stämmer ej med saldo
                                    }
                else {
                                        if (task.Delayed) {
                                            <img src="@Url.Image("icn-alarm.png")" alt="Larm" />
                                            <strong>Avvikelse:</strong>
                                            if (task.DelayHandled) {
                                                @Html.ActionLink("Larm åtgärdat", "List", "Alert", new { id = task.Patient.Id }, new { })
                        }
                        else {
                                                @:Ej given
                                            }
                                        }
                                    }
                                }
                                
                            </td>
					    </tr>
                        }
				    </tbody>
			    </table>
		    </div>
            @Html.Pager((int)Model.Tasks.PageSize, (int)Model.Tasks.CurrentPage, (int)Model.Tasks.TotalCount).Options(o => o
                .DisplayTemplate("Pagination")
                .MaxNrOfPages(15)
                .AlwaysAddFirstPageNumber()
                .AddRouteValue("scheduleSettingsId", Model.Schedule)
                .AddRouteValue("startDate", Model.StartDate.ToShortDateString())
                .AddRouteValue("endDate", Model.EndDate.ToShortDateString())
                )
            }
        </div>
    </div>
</div>
<script type="text/javascript">
    $(function () {
        Date.format = 'yyyy-mm-dd';
        $('.datepick').datePicker({
            'startDate': '1970-01-01',
            'clickInput': true 
        });
        $('#subheader form').validate({
            'rules': {
                'StartDate': {
                    'date': true,
                    'datelessthan': [$('#EndDate')]
                },
                'EndDate': {
                    'date': true,
                    'dategreaterthan': [$('#StartDate')]
                }
            },
            'messages': {
                'StartDate': {
                    'date': "Datum måste fyllas i med åtta siffror och bindestreck, t. ex. 2012-12-21.",
                    'datelessthan': "Startdatum måste vara ett tidigare datum är slutdatum."
                },
                'EndDate': {
                    'date': "Datum måste fyllas i med åtta siffror och bindestreck, t. ex. 2012-12-21.",
                    'dategreaterthan': "Slutdatum måste vara ett senare datum är startdatum."
                }
            }
        });
        mcss.chart.Load({ 
            'selector': '#chart',
            'url': '@Url.Action("GetChartData", "Statistics", new { area = "" })',
            'min': new Date(@Model.StartDate.Year, @(Model.StartDate.Month - 1), @Model.StartDate.Day),
            'max': new Date(@Model.EndDate.Year, @(Model.EndDate.Month - 1), @Model.EndDate.Day),
            'parameters': {
                'Patient': '@Model.Patient.Id',
                'ScheduleSetting': '@Model.Schedule', 
                'Start': '@Model.StartDate.ToShortDateString()',
                'End': '@Model.EndDate.ToShortDateString()'
            }
        });

    });
</script>