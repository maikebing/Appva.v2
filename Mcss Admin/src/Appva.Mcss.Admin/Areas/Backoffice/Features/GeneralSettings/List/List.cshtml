@model Appva.Mcss.Admin.Areas.Backoffice.Models.ListGeneralSettingsModel
@{
    SetTitle("Admin - Generella inställningar");
}
@Html.Partial("_BackofficeMenuPartial")
<div id="subheader" class="cf">
    <h1>Generella inställningar</h1>
</div>
<div id="content" class="cf">
    <div id="content-primary">
      @if (Model.List != null && Model.List.Count() > 0)
      {
          <ul id="setlist">
              @foreach (var item in Model.List)
              {
                  <li>
                      <h1 title="@item.MachineName" style="background:@item.ColorCode">@item.Category</h1>
                      <h2>@item.Name</h2>
                     @*@Html.ActionLink(item.Name, "Edit", "GeneralSettings", new { Id = item.Id }, new { @class = "lb-link" })*@
                      @if (item.Description != null && item.Description != string.Empty)
                      {
                          <p>@item.Description</p>
                      }

                      @if (item.IntValue != null)
                      {
                          <div class="value-section">
                              @Html.FormGroup(i => item.IntValue, "text").Label("Värde", new { @for = "setValue", @class = "value-label" }).TextBox(null, new { @id = "setValue", @type = "number", @class = "value-input" }).Validate().Build()
                          </div>
                      }

                      @if (item.BoolValue != null)
                      {
                          bool isBool = (bool)item.BoolValue;
                          <div class="settings-section">
                              @Html.FormGroup(x => isBool, "text").Checkbox("Aktivera").Validate().Build()
                          </div>
                      }

                      @if (item.StringValue != null)
                      {
                          if (item.PdfGenObject != null)
                          {
                            <script language="javascript">
                                    function newBackgroundColor() {
                                        var a = document.getElementById("Colors_BackgroundColor");
                                        var b = document.getElementById("color1");
                                        a.value = b.value;
                                    }
                                    function newerBackgroundColor() {
                                        var b = document.getElementById("color1");
                                        var c = document.getElementById("Colors_BackgroundColor")
                                        b.value = c.value;
                                    }

                                    function newBackgroundColor2() {
                                        var a = document.getElementById("Colors_FontColor");
                                        var b = document.getElementById("color2");
                                        a.value = b.value;
                                    }
                                    function newerBackgroundColor2() {
                                        var b = document.getElementById("color2");
                                        var c = document.getElementById("Colors_FontColor")
                                        b.value = c.value;
                                    }

                                    function newBackgroundColor3() {
                                        var a = document.getElementById("Colors_TableHeaderColor");
                                        var b = document.getElementById("color3");
                                        a.value = b.value;
                                    }
                                    function newerBackgroundColor3() {
                                        var b = document.getElementById("color3");
                                        var c = document.getElementById("Colors_TableHeaderColor")
                                        b.value = c.value;
                                    }

                                    function newBackgroundColor4() {
                                        var a = document.getElementById("Colors_TableBorderColor");
                                        var b = document.getElementById("color4");
                                        a.value = b.value;
                                    }
                                    function newerBackgroundColor4() {
                                        var b = document.getElementById("color4");
                                        var c = document.getElementById("Colors_TableBorderColor")
                                        b.value = c.value;
                                    }

                            </script>
                            <p> Background
                                <div id="textboxResized">@Html.FormGroup(x => x.Colors.BackgroundColor, "text").TextBox(null, new { onchange = "newerBackgroundColor(Colors_BackgroundColor.value)"}).Validate().Build()</div>
                                <input name="colorpicker" id="color1" type="color" value="@Model.Colors.BackgroundColor" onchange="newBackgroundColor(color1.value);">
                                @Html.HiddenFor(x => x.Colors.BackgroundColor)
                                    </p>
        

                                    <p>
                                        Font
                                        <div id="textboxResized">@Html.FormGroup(x => x.Colors.FontColor, "text").TextBox(null, new { onchange = "newerBackgroundColor2(Colors_FontColor.value)" }).Validate().Build()</div>
                                        <input name="colorpicker2" id="color2" type="color" value="@Model.Colors.FontColor" onchange="newBackgroundColor2(colorpicker2.value);">
                                        @Html.HiddenFor(x => x.Colors.FontColor)
                                    </p>
        
                                    <p>
                                        Table Header
                                        <div id="textboxResized">@Html.FormGroup(x => x.Colors.TableHeaderColor, "text").TextBox(null, new { onchange = "newerBackgroundColor3(Colors_TableHeaderColor.value)" }).Validate().Build()</div>
                                <input name="colorpicker3" id="color3" type="color" value="@Model.Colors.TableHeaderColor" onchange="newBackgroundColor3(colorpicker3.value);">
                                @Html.HiddenFor(x => x.Colors.TableHeaderColor)
                            </p>
                            <p>
                                Table Border
                                <div id="textboxResized">@Html.FormGroup(x => x.Colors.TableBorderColor, "text").TextBox(null, new { onchange = "newerBackgroundColor4(Colors_TableBorderColor.value)" }).Validate().Build()</div>
                                <input name="colorpicker4" id="color4" type="color" value="@Model.Colors.TableBorderColor" onchange="newBackgroundColor4(colorpicker4.value);">
                                @Html.HiddenFor(x => x.Colors.TableBorderColor)
                            </p>
                          }
                                 }


                          @*
                          <p class="settings-title"><b>@item.Name</b></p>

                          if (item.IsJson)
                          {
                              if (item.InventoryObject != null)
                              {
                                  int index = 0;

                                  foreach (var item in item.InventoryObject)
                                  {
                                      <div class="settings-section">
                                          @Html.FormGroup(x => item.Name, "text").Label(null, new { @for = "name" + index }).TextBox(null, new { @id = "name" + index }).Validate().Build()

                                          <label class="settings-label">Id</label>
                                          <span class="textblock">@item.Id</span>

                                          @for (int i = 0; i < item.Amounts.Count; i++)
                                          {
                                              item.Amount += item.Amounts[i].ToString("0.0####").Replace(',', '.');

                                              if (i < item.Amounts.Count - 1)
                                              {
                                                  item.Amount += ", ";
                                              }
                                          }

                                          @Html.FormGroup(x => item.Amount, "text large").Label(null, new { @for = "amount" + index }).TextArea(null, new { @id = "amount" + index }).Validate().Build()
                                      </div>
                                      index++;
                                  }
                              }
                          }
                          else
                          {
                          <div class="settings-section">
                              @Html.Label("Värde")
                              @Html.FormGroup(x => item.StringValue, "text large").TextArea().Validate().Build()
                          </div>
                              *@
                      }
                  </li>
              }
          </ul>
      }
      else
      {
        <div class="note">
            <h2>Inga inställningar hittades.</h2>
        </div>
      }
    </div>
</div>