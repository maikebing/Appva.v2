@model Appva.Mcss.Web.ViewModels.PreparePrintViewModel
@{
    ViewBag.Title = "Print";
    Layout = "~/Views/Shared/_PrintLayout.cshtml";
}
@foreach (var month in Model.PrintSchedule)
{
<div id="header" class="cf">
	<div id="logo"><img src="@Url.Image("logo.png")" alt="Prototyp" width="60" /></div>
	<h1>@Model.Schedule.Name @String.Format("{0:yyyy-MM-dd}", month.Key) - @String.Format("{0:yyyy-MM-dd}", month.Key.FirstOfMonth().AddDays(DateTime.DaysInMonth(month.Key.Year, month.Key.Month) - 1))</h1>
</div>
<div id="signprint">
	<table>
		<tbody>
			<tr>
				<td>Boende<h2>@Model.Patient.FirstName @Model.Patient.LastName</h2></td>
				<td>Personnummer<h2>@Model.Patient.PersonalIdentityNumber</h2></td>
			</tr>
		</tbody>
	</table>
	<table>
		<thead>
			<tr>
				<th>Läkemedel</th>
				<th colspan="@DateTime.DaysInMonth(month.Key.Year, month.Key.Month)">Dag</th>
			</tr>
			<tr>
				<th></th>
                @for (var day = 0; day < DateTime.DaysInMonth(month.Key.Year, month.Key.Month); day++)
                {
                    <th>@(day + 1)</th>
                }
			</tr>
		</thead>
		<tbody>
            @foreach (var sequence in month.Value)
            {
                <tr>
                    <td>@sequence.Key.Split(':')[0]</td>
                    @for (var day = 0; day < DateTime.DaysInMonth(month.Key.Year, month.Key.Month); day++) {
                        <td class="ok">
                            @(sequence.Value.ContainsKey(day + 1) && sequence.Value[day + 1].IsNotNull() ? sequence.Value[day + 1] : "")
                        </td>
                    }
                </tr>
            }
		</tbody>
	</table>	
	<h3>Signaturförtydligande</h3>
	<table class="clarify">
		<thead>
			<tr>
				<th>Namn</th>
				<th class="signature">Sign</th>
				<th>Namn</th>
				<th class="signature">Sign</th>
				<th>Namn</th>
				<th class="signature">Sign</th>
				<th>Namn</th>
				<th class="signature">Sign</th>
			</tr>
		</thead>
        <tbody>
            @{var signList = Model.Signatures[month.Key.Month].ToList();}
            @for (var i = 0; i < 4 || signList.Count > i * 4; i++)
            { 
                <tr>
                    @for (var j = 0; j < 4; j++)
                    { 
                        <td>@(signList.Count > i * 4 + j ? signList[i * 4 + j].Key.Split(':')[0] : "")</td>
                        <td>@(signList.Count > i * 4 + j ? signList[i * 4 + j].Value : "")</td>
                    }
                </tr>
            }
		</tbody>
	</table>
</div>
}
