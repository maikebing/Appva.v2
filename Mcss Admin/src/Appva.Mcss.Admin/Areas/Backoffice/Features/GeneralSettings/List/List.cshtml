@model Appva.Mcss.Admin.Areas.Backoffice.Models.ListGeneralSettingsModel
@{
    SetTitle("Admin - Generella inställningar");
}
@Html.Partial("_BackofficeMenuPartial")

<div id="subheader" class="cf">
    <h1>Generella inställningar</h1>
</div>
<div id="content" class="cf">
    <script>
        function colorPicker(id1, id2) {
            document.getElementById(id1).value = document.getElementById(id2).value;
        }
        function setBackground(id1, id2, bgColor, color, inputBgColor) {
            var el = document.getElementById(id1);
            el.style.backgroundColor = bgColor;
            el.style.color = color;
            document.getElementById(id2).style.backgroundColor = inputBgColor;
        }
    </script>
    <div id="content-primary">
    @if (Model.List != null && Model.List.Count() > 0)
    {
        <ul id="setlist">
            @foreach (var item in Model.List)
            {
                <li>
                    <div class="header">
                        <h3 title="@item.MachineName"><span style="background:@item.CategoryColor"></span>@item.Category</h3>
                        <h2>@item.Name</h2>
                        @if (string.IsNullOrEmpty(item.Description) == false)
                        {
                            <p>@item.Description</p>
                        }
                    </div>
                    <div class="content">
                        @if (item.Type == typeof(int))
                        {
                            int value;
                            @Textbox("Värde", "value" + item.Index, (int.TryParse(item.Value, out value) ? value : 0), false, true)
                        }
                        else if (item.Type == typeof(Boolean))
                        { 
                            @Checkbox("check" + item.Index, Convert.ToBoolean(item.Value)) 
                        }
                        else if (item.PdfLookAndFeel != null && item.IsJson)
                        {
                            @Checkbox("pdf-custFooter", item.PdfLookAndFeel.IsCustomFooterTextEnabled, "Custom footer text", false, true)
                            @Checkbox("pdf-custLogotype", item.PdfLookAndFeel.IsCustomLogotypeEnabled, "Custom logotype", false)
                            @ColorInput("Background color", "pdf-bgcolor", item.PdfLookAndFeel.BackgroundColor)
                            @ColorInput("Font color", "pdf-fontcolor", item.PdfLookAndFeel.FontColor)
                            @ColorInput("Table border color", "pdf-bordercolor", item.PdfLookAndFeel.TableBorderColor)
                            @ColorInput("Table header color", "pdf-headercolor", item.PdfLookAndFeel.TableHeaderColor, false)
                        }
                        else if (item.SecurityTokenConfig != null && item.IsJson)
                        {
                            @Textbox("Audience", "sec-tokenAudience", item.SecurityTokenConfig.Audience)
                            @Textbox("Issuer", "sec-tokenIssuer", item.SecurityTokenConfig.Issuer)
                            @Textbox("Reset lifetime", "sec-tokenResetLifetime", item.SecurityTokenConfig.ResetTokenLifetime)
                            @Textbox("Registration lifetime", "sec-tokenRegLifetime", item.SecurityTokenConfig.RegistrationTokenLifetime)
                            @Textbox("Signing key", "sec-tokenKey", item.SecurityTokenConfig.SigningKey, false)
                        }
                        else if (item.SecurityMailerConfig != null && item.IsJson)
                        {
                            @Checkbox("secmailconf-signing", item.SecurityMailerConfig.IsMailSigningEnabled, "IsMailSigningEnabled", false, true)
                            @Checkbox("secmailconf-deviceRegMail", item.SecurityMailerConfig.IsMobileDeviceRegistrationMailEnabled, "IsMobileDeviceRegistrationMailEnabled", false, true)
                            @Checkbox("secmailconf-regMail", item.SecurityMailerConfig.IsRegistrationMailEnabled, "IsRegistrationMailEnabled", false, true)
                            @Checkbox("secmailconf-resetPassMail", item.SecurityMailerConfig.IsResetPasswordMailEnabled, "IsResetPasswordMailEnabled", false, true)
                            @Checkbox("secmailconf-eventMail", item.SecurityMailerConfig.IsSecurityEventMailEnabled, "IsSecurityEventMailEnabled", false)
                        }
                        else
                        {
                            if (item.MachineName == Model.SelectOptions[0])
                            {
                                int value;
                                if (int.TryParse(item.Value, out value))
                                {
                                    @Textbox("Värde", "value" + item.Index, value, false, true)
                                }
                                else
                                {
                                    @Select("Välj", "select" + item.Index, item.Value, new string[] { "High", "Medium", "Low" })
                                }
                            }
                            else if (item.MachineName == Model.SelectOptions[1])
                            {
                                @Select("Välj", "select" + item.Index, item.Value, new string[] { "Form", "Siths" })
                            }
                            else
                            {
                                @Textbox("Sträng", "strValue" + item.Index, item.Value, false)
                            }
                        }
                    </div>
                </li>
            }
        </ul>
    }
    else
    {
        <div class="note">
            <h2>Inga inställningar hittades.</h2>
        </div>
    }
    </div>
</div>

@* Templates *@
@helper Checkbox(string id, bool isChecked, string description = null, bool isCentered = true, bool formGroup = false)
{
    <div class="settings-section" style="@(formGroup ? "border-width:1px 1px 0 1px" : "border-width:1px;margin-bottom:15px")">
        @if (description != null)
        {
            <label class="section-label" for="@id" title="@description">@description</label>
        }
        <div class="form-group @(isCentered ? "t-center" : "t-right")">
            <label class="checkbox-inline" for="@id">
                <input type="checkbox" id="@id" name="@id" @(isChecked ? "checked" : "") />Aktivera
            </label>
        </div>
    </div>
}
@helper Select(string labelName, string id, string value, string[] options)
{
    string labelId = id + "label";
    <div class="select-section" style="border-width:1px;margin-bottom:15px">
        <label class="section-label attr-item" id="@labelId" for="@id">@labelName</label>
        <div class="select-wrapper">
            <select id="@id" name="@id" onfocus="@SetRowBackground(labelId, id, true)" onblur="@SetRowBackground(labelId, id, false)">
            @foreach(var option in options)
            {
                <option value="@option"@(option.ToLower() == value.ToLower() ? " selected" : "")>@option</option>
            }
            </select>
        </div>
    </div>
}
@helper Textbox(string labelName, string id, dynamic value, bool formGroup = true, bool isNumber = false)
{
    string labelId = id + "label";
    <div class="value-section">
        <label class="value-label attr-item border-r" id="@labelId" for="@id">@labelName</label>
        <input type="@(isNumber ? "number" : "text")" id="@id" name="@id" maxlength="20" value="@value" autocomplete="off" onfocus="@SetRowBackground(labelId, id, true)" onblur="@SetRowBackground(labelId, id, false)" style="@(formGroup ? "border-width:1px 1px 0 1px" : "border-width:1px;margin-bottom:15px")" />
    </div>
}
@helper ColorInput(string labelName, string id, dynamic color, bool formGroup = true)
{
    string pickerId = id + "picker", labelId = id + "label", hex = @RgbToHex(color);
    <div class="value-section" style="@(formGroup ? "padding-bottom:0" : "padding-bottom:15px")">
        <label id="@(labelId)" class="value-label attr-item" for="@id">@labelName</label>
        <input class="p-left" id="@id" name="@id" maxlength="7" style="@(formGroup ? "border-width:1px 1px 0 1px" : "border-width:1px")" onfocus="@SetRowBackground(labelId, id, true)" onblur="@SetRowBackground(labelId, id, false)" onchange="colorPicker('@pickerId', this.id)" type="text" value="@hex" />
        <input id="@pickerId" style="@(formGroup ? "bottom:7px" : "bottom:23px")" onfocus="@SetRowBackground(labelId, id, true)" onblur="@SetRowBackground(labelId, id, false)" onchange="colorPicker('@id', this.id)" type="color" value="@hex" />
    </div>
}
@functions
{
    public string RgbToHex(dynamic color)
    {
        return "#" + (color.R.ToString("X2") + color.G.ToString("X2") + color.B.ToString("X2")).ToLower();
    }

    public string SetRowBackground(string labelId, string inputId, bool hasFocus)
    {
        return "setBackground('" + labelId + "', '" + inputId + "', " + (hasFocus ? "'#4d90fe', '#fff', '#f5f5f5'" : "'transparent', '#222', 'transparent'") + ")";
    }
}
