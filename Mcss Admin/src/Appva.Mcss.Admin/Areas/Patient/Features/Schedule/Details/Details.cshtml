@using Appva.Mcss.Admin.Application.Common﻿
@model Appva.Mcss.Web.ViewModels.ScheduleDetailsViewModel

@{
    ViewBag.Title = Localizer["Ordinationer"].ToString();
    var intervalMap = new Dictionary<int, string>();
    intervalMap.Add(0, Localizer["Annan"].ToString());
    intervalMap.Add(1, Localizer["Varje_dag"].ToString());
    intervalMap.Add(2, Localizer["Varannan_dag"].ToString());
    intervalMap.Add(3, Localizer["Var_tredje_dag"].ToString());
    intervalMap.Add(4, Localizer["Var_fjärde_dag"].ToString());
    intervalMap.Add(5, Localizer["Var_femte_dag"].ToString());
    intervalMap.Add(6, Localizer["Var_sjätte_dag"].ToString());
    intervalMap.Add(7, Localizer["Varje_vecka"].ToString());
    intervalMap.Add(14, Localizer["Varannan_vecka"].ToString());
    intervalMap.Add(21, Localizer["Var_tredje_vecka"].ToString());
    intervalMap.Add(28, Localizer["Var_fjärde_vecka"].ToString());
    intervalMap.Add(35, Localizer["Var_femte_vecka"].ToString());
    intervalMap.Add(56, Localizer["Var_åttonde_vecka"].ToString());
    intervalMap.Add(84, Localizer["Var_tolfte_vecka"].ToString());
    List<int> times = new List<int>();
    foreach (var item in Model.ScheduleItems) 
    {
        if (! string.IsNullOrEmpty(item.Times)) 
        {
            foreach (string str in item.Times.Split(',')) 
            {
                int result = 0;
                if (int.TryParse(str, out result)) 
                {
                    if (! times.Contains(result)) 
                    {
                        times.Add(result);
                    }
                }
            }
        }  
    }
    if (times.Count == 0) 
    {
        times.AddRange(new List<int> { 9, 12, 15, 17, 18, 21 });
    }
    times.Sort();
}

@Html.Partial("~/Areas/Patient/Features/Patient/Partials/_PatientDetails.cshtml", Model.Patient)
@Html.Partial("~/Features/Shared/_SubMenuPartial.cshtml", Model.Patient)
<div id="subheader" class="cf">
	<h1>@Localizer["Signeringslistor"]</h1>
    @Html.ActionLink(Permissions.Sequence.Print, Localizer["Skapa_pdf"].ToString(), "PrintPopUp", "Sequence", new { id = Model.Patient.Id, scheduleId = Model.Schedule.Id }, new { @class = "btn printp lb-link" })
    @Html.ActionLink(Permissions.Sequence.Create,  Localizer["Lägg_till"].ToString(), "Create", "Sequence", new { id = Model.Patient.Id, scheduleId = Model.Schedule.Id }, new { @class = "btn lb-link" })
</div>

<div id="content" class="cf">
	
    <div id="content-primary" class="signlist-collection">
		
        <div id="signlist">
			
            <div class="h cf">
				<h2>@Model.Schedule.ScheduleSettings.Name - Senast ändrad @String.Format("{0:yyyy-MM-dd}", Model.Schedule.UpdatedAt)</h2>
				@Html.ActionLink(Localizer["Stäng_listan"].ToString(), "List", "Schedule", new { id = Model.Patient.Id }, new { @class = "close" })
			</div>
			
            <ul class="nav cf">
                
				@Html.MenuLink(Localizer["Insatser"].ToString(), "Details", "Schedule", false, new { id = Model.Patient.Id, scheduleId = Model.Schedule.Id })
                @if (Model.Schedule.ScheduleSettings.HasSetupDrugsPanel && Html.HasPermissionFor(Permissions.Prepare.Read))
                { 
                    @Html.MenuLink(Localizer["Iordningsställande"].ToString(), "Schema", "Prepare", false, new { id = Model.Patient.Id, scheduleId = Model.Schedule.Id })
                }
			</ul>
			<table>
				<thead>
					<tr class="head">
						<th scope="col">@Localizer["Att_ge"]</th>
						<th scope="col">@Localizer["Frekvens"]</th>
						<th scope="col">@Localizer["inom"]</th>
						<th scope="col" colspan="@times.Count">@Localizer["Tider"]</th>
						<th scope="col" colspan="@((Model.Schedule.ScheduleSettings.HasInventory && Html.HasPermissionFor(Permissions.Inventory.Read)) ? 1 : 2)">@Localizer["Instruktion"]</th>
                        @if (Model.Schedule.ScheduleSettings.HasInventory && Html.HasPermissionFor(Permissions.Inventory.Read))
                        {
                            <th colspan="3" scope="col">@Localizer["Saldo"]</th>
                        }
					</tr>
					<tr>
						<td colspan="3"></td>
                        @foreach (var time in times)
                        {
                            <th scope="col">@time</th>
                        }
						<td colspan="@((Model.Schedule.ScheduleSettings.HasInventory && Html.HasPermissionFor(Permissions.Inventory.Read)) ? 4 : 2)"></td>
					</tr>
				</thead>
				<tbody>
                @foreach (var item in Model.ScheduleItems)
                {
                    var isPast = (item.EndDate.HasValue) ? item.EndDate.Value.Date < DateTime.Today : false;
                    var isFuture = (item.StartDate.Date > DateTime.Today) ? true : false;
                    <tr class="@( (isPast || isFuture) ? "inactive" : "active")">
                        <td>
                            @item.Name
                            <span class="date @(isFuture ? "future" : "") @(isPast ? "past" : "")">
                                @String.Format("{0:yyyy-MM-dd}", item.StartDate)
                                —
                                @((item.EndDate.HasValue) ? string.Format("{0:yyyy-MM-dd}", item.EndDate) : string.Empty)
                            </span>
                        </td>
                        <td class="freq">
                            @if (item.OnNeedBasis)
                            {
                                @Localizer["Vid_behov"]
                            }
                            else
                            {
                                @intervalMap[item.Interval]
                            }
                        </td>
                        <td class="frame">
                            @if (item.OnNeedBasis)
                            {
                                <span style="text-align:center;">–</span>
                            }
                            else
                            {
                                <span>@item.RangeInMinutesBefore @Localizer["min_innan"]</span>
                                <span>@item.RangeInMinutesAfter @Localizer["min_efter"]</span>
                            }
                        </td>
                        @{
                            List<int> itemTimes = new List<int>();
                            if (!string.IsNullOrEmpty(item.Times))
                            {
                                foreach (var str in item.Times.Split(','))
                                {
                                    var result = 0;
                                    if (int.TryParse(str, out result))
                                    {
                                        itemTimes.Add(result);
                                    }
                                }
                            }
                        }
                        @if (item.OnNeedBasis)
                        {
                            <td class="time" colspan="@times.Count.ToString()">
                                –
                            </td>
                        }
                        else
                        {
                            foreach (var time in times)
                            {
                                <td class="time @( itemTimes.Contains(time) ? "y" : "")">
                                    @if (itemTimes.Contains(time))
                                    {
                                        <img src="@Url.Image("icn-check.png")" alt="ja" />
                                    }
                                </td>
                            }
                        }

                        <td class="info"><p>@item.Description</p></td>

                        @if (item.Inventory != null && Html.HasPermissionFor(Permissions.Inventory.Read))
                        {
                            <td @(item.Inventory.IsActive ? "" : "class=inactive-inventory")>
                                <span class="date">
                                    @Html.ActionLink(Permissions.Inventory.Read, item.Inventory.Description, "list", "Inventory", new { Id = Model.Patient.Id, InventoryId = item.Inventory.Id }, new { })
                                </span>
                                @Localizer["Saldo"]: @item.Inventory.CurrentLevel
                            </td>
                        }
                        @if (item.Inventory != null && Html.HasPermissionFor(Permissions.Inventory.Read))
                        {
                            if (item.Inventory.IsActive)
                            {
                                <td class="nedit">
                                    @Html.ActionLink(Permissions.Inventory.Create, Localizer["Tillför_mängd"].ToString(), "Add", "Inventory", new { Id = Model.Patient.Id, InventoryId = item.Inventory.Id, ReturnUrl = HttpContext.Current.Request.Url.AbsoluteUri }, new { @class = "addamount lb-link" })
                                    @Html.ActionLink(Permissions.Inventory.Create, Localizer["Uttag"].ToString(), "Withdraw", "Inventory", new { Id = Model.Patient.Id, InventoryId = item.Inventory.Id, ReturnUrl = HttpContext.Current.Request.Url.AbsoluteUri }, new { @class = "addamount lb-link" })
                                    @if (Model.Schedule.ScheduleSettings.CountInventory)
                                    {
                                        @Html.ActionLink(Localizer["Kontrollräkna"].ToString(), "Recount", "Inventory", new { Id = Model.Patient.Id, InventoryId = item.Inventory.Id, ReturnUrl = HttpContext.Current.Request.Url.AbsoluteUri }, new { @class = "addamount lb-link" })
                                    }
                                </td>
                            }
                            else
                            {
                                <td class="inactive-inventory">
                                    <h3>@Localizer["Observera"]</h3>
                                    <p>@Localizer["Insatsen_är_kopplad_till_ett_borttaget_ saldo"]</p>
                                </td>
                            }

                        }
                        <td class="edit">
                            @Html.ActionLink(Permissions.Sequence.Update, Localizer["Ändra"].ToString(), "Update", "Sequence", new { Id = Model.Patient.Id, SequenceId = item.Id }, new { @class = "edit lb-link", @title = "Ändra raden" })
                            @Html.ActionLink(Permissions.Sequence.Inactivate, Localizer["Ta_bort"].ToString(), "Inactivate", "Sequence", new { Id = Model.Patient.Id, SequenceId = item.Id }, new { @class = "delete", @title = "Ta bort raden" })
                        </td>
                    </tr>
                }
                </tbody>
			</table>
            <div id="add-sign" class="cf">
				@Html.ActionLink(Permissions.Sequence.Create, Localizer["Lägg_till"].ToString(), "Create", "Sequence", new { Id = Model.Patient.Id, ScheduleId = Model.Schedule.Id }, new { @class = "btn lb-link" })
			</div>
		</div>
	</div>
</div>